{"/home/travis/build/npmtest/node-npmtest-braintree/test.js":"/* istanbul instrument in package npmtest_braintree */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-braintree/lib.npmtest_braintree.js":"/* istanbul instrument in package npmtest_braintree */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_braintree = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_braintree = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-braintree/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-braintree && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_braintree */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_braintree\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_braintree.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_braintree.rollup.js'] =\n            local.assetsDict['/assets.npmtest_braintree.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_braintree.__dirname + '/lib.npmtest_braintree.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/index.js":"'use strict';\n\nmodule.exports = require('./lib/braintree');\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree.js":"'use strict';\n\nlet version = require('../package.json').version;\nlet Config = require('./braintree/config').Config;\nlet Environment = require('./braintree/environment').Environment;\nlet BraintreeGateway = require('./braintree/braintree_gateway').BraintreeGateway;\nlet errorTypes = require('./braintree/error_types').errorTypes;\n\nlet Transaction = require('./braintree/transaction').Transaction;\n\nlet CreditCard = require('./braintree/credit_card').CreditCard;\nlet PayPalAccount = require('./braintree/paypal_account').PayPalAccount;\nlet AndroidPayCard = require('./braintree/android_pay_card').AndroidPayCard;\nlet ApplePayCard = require('./braintree/apple_pay_card').ApplePayCard;\nlet VenmoAccount = require('./braintree/venmo_account').VenmoAccount;\nlet CoinbaseAccount = require('./braintree/coinbase_account').CoinbaseAccount;\nlet AmexExpressCheckoutCard = require('./braintree/amex_express_checkout_card').AmexExpressCheckoutCard;\n\nlet CreditCardVerification = require('./braintree/credit_card_verification').CreditCardVerification;\nlet Subscription = require('./braintree/subscription').Subscription;\nlet MerchantAccount = require('./braintree/merchant_account').MerchantAccount;\nlet PaymentInstrumentTypes = require('./braintree/payment_instrument_types').PaymentInstrumentTypes;\nlet WebhookNotification = require('./braintree/webhook_notification').WebhookNotification;\nlet TestingGateway = require('./braintree/testing_gateway').TestingGateway;\nlet ValidationErrorCodes = require('./braintree/validation_error_codes').ValidationErrorCodes;\n\nlet CreditCardDefaults = require('./braintree/test/credit_card_defaults').CreditCardDefaults;\nlet CreditCardNumbers = require('./braintree/test/credit_card_numbers').CreditCardNumbers;\nlet MerchantAccountTest = require('./braintree/test/merchant_account').MerchantAccountTest;\nlet Nonces = require('./braintree/test/nonces').Nonces;\nlet TransactionAmounts = require('./braintree/test/transaction_amounts').TransactionAmounts;\n\nlet connect = config => new BraintreeGateway(new Config(config)); // eslint-disable-line func-style\nlet Test = {\n  CreditCardDefaults: CreditCardDefaults,\n  CreditCardNumbers: CreditCardNumbers,\n  MerchantAccountTest: MerchantAccountTest,\n  Nonces: Nonces,\n  TransactionAmounts: TransactionAmounts\n};\n\nmodule.exports = {\n  connect: connect,\n  version: version,\n  Environment: Environment,\n  errorTypes: errorTypes,\n\n  Transaction: Transaction,\n\n  CreditCard: CreditCard,\n  PayPalAccount: PayPalAccount,\n  AndroidPayCard: AndroidPayCard,\n  ApplePayCard: ApplePayCard,\n  VenmoAccount: VenmoAccount,\n  CoinbaseAccount: CoinbaseAccount,\n  AmexExpressCheckoutCard: AmexExpressCheckoutCard,\n\n  CreditCardVerification: CreditCardVerification,\n  Subscription: Subscription,\n  MerchantAccount: MerchantAccount,\n  PaymentInstrumentTypes: PaymentInstrumentTypes,\n  WebhookNotification: WebhookNotification,\n  TestingGateway: TestingGateway,\n  ValidationErrorCodes: ValidationErrorCodes,\n\n  Test: Test\n};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/config.js":"'use strict';\n\nlet CredentialsParser = require('./credentials_parser').CredentialsParser;\n\nclass Config {\n  constructor(rawConfig) {\n    this.timeout = 60000;\n    this.apiVersion = '4';\n    let parser = new CredentialsParser();\n\n    if (rawConfig.clientId || rawConfig.clientSecret) {\n      parser.parseClientCredentials(rawConfig.clientId, rawConfig.clientSecret);\n      this.clientId = parser.clientId;\n      this.clientSecret = parser.clientSecret;\n      this.environment = parser.environment;\n    } else if (rawConfig.accessToken) {\n      parser.parseAccessToken(rawConfig.accessToken);\n      this.accessToken = parser.accessToken;\n      this.environment = parser.environment;\n      this.merchantId = parser.merchantId;\n    } else {\n      this.publicKey = rawConfig.publicKey;\n      this.privateKey = rawConfig.privateKey;\n      this.merchantId = rawConfig.merchantId || rawConfig.partnerId;\n      this.environment = rawConfig.environment;\n      if (!this.publicKey) { throw new Error('Missing publicKey'); }\n      if (!this.privateKey) { throw new Error('Missing privateKey'); }\n      if (!this.merchantId) { throw new Error('Missing merchantId'); }\n      if (!this.environment) { throw new Error('Missing environment'); }\n    }\n  }\n\n  baseMerchantPath() { return `/merchants/${this.merchantId}`; }\n\n  baseUrl() { return this.environment.baseUrl(); }\n\n  baseMerchantUrl() { return this.baseUrl() + this.baseMerchantPath(); }\n}\n\nmodule.exports = {Config: Config};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/credentials_parser.js":"'use strict';\n\nlet Environment = require('./environment').Environment;\n\nclass CredentialsParser {\n  parseClientCredentials(clientId, clientSecret) {\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n    if (!this.clientId) { throw new Error('Missing clientId'); }\n    if (!this.clientSecret) { throw new Error('Missing clientSecret'); }\n\n    if (this.clientId.indexOf('client_id') !== 0) { throw new Error('Value passed for clientId is not a client id'); }\n    if (this.clientSecret.indexOf('client_secret') !== 0) { throw new Error('Value passed for clientSecret is not a client secret'); }\n\n    let clientIdEnvironment = this.parseEnvironment(this.clientId);\n    let clientSecretEnvironment = this.parseEnvironment(this.clientSecret);\n\n    if (clientIdEnvironment !== clientSecretEnvironment) {\n      throw new Error(`Mismatched credential environments: clientId environment is ${clientIdEnvironment} and clientSecret environment is ${clientSecretEnvironment}`);\n    }\n\n    this.environment = clientIdEnvironment;\n\n    return this.environment;\n  }\n\n  parseAccessToken(accessToken) {\n    this.accessToken = accessToken;\n    if (!this.accessToken) { throw new Error('Missing access token'); }\n\n    if (this.accessToken.indexOf('access_token') !== 0) { throw new Error('Value passed for accessToken is not a valid access token'); }\n\n    this.merchantId = this.accessToken.split('$')[2];\n    this.environment = this.parseEnvironment(this.accessToken);\n\n    return this.environment;\n  }\n\n  parseEnvironment(credential) {\n    let env = credential.split('$')[1];\n\n    switch (env) {\n      case 'development':\n      case 'integration': return Environment.Development;\n      case 'qa': return Environment.Qa;\n      case 'sandbox': return Environment.Sandbox;\n      case 'production': return Environment.Production;\n      default: throw new Error(`Unknown environment: ${env}`);\n    }\n  }\n}\n\nmodule.exports = {CredentialsParser: CredentialsParser};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/environment.js":"'use strict';\n\nlet DEVELOPMENT_PORT;\n\nclass Environment {\n  static initClass() {\n    DEVELOPMENT_PORT = process.env.GATEWAY_PORT || '3000';\n    this.Development = new Environment('localhost', DEVELOPMENT_PORT, 'http://auth.venmo.dev:9292', false);\n    this.Qa = new Environment('gateway.qa.braintreepayments.com', '443', 'https://auth.venmo.qa2.braintreegateway.com', true);\n    this.Sandbox = new Environment('api.sandbox.braintreegateway.com', '443', 'https://auth.sandbox.venmo.com', true);\n    this.Production = new Environment('api.braintreegateway.com', '443', 'https://auth.venmo.com', true);\n  }\n\n  constructor(server, port, authUrl, ssl) {\n    this.server = server;\n    this.port = port;\n    this.authUrl = authUrl;\n    this.ssl = ssl;\n  }\n\n  baseUrl() {\n    let url = this.uriScheme() + this.server;\n\n    if (this === Environment.Development) {\n      url += `:${this.port}`;\n    }\n\n    return url;\n  }\n\n  uriScheme() {\n    return this.ssl ? 'https://' : 'http://';\n  }\n}\nEnvironment.initClass();\n\nmodule.exports = {Environment: Environment};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/braintree_gateway.js":"'use strict';\n\nlet Http = require('./http').Http;\nlet AddOnGateway = require('./add_on_gateway').AddOnGateway;\nlet AddressGateway = require('./address_gateway').AddressGateway;\nlet ClientTokenGateway = require('./client_token_gateway').ClientTokenGateway;\nlet CreditCardGateway = require('./credit_card_gateway').CreditCardGateway;\nlet CreditCardVerificationGateway = require('./credit_card_verification_gateway').CreditCardVerificationGateway;\nlet CustomerGateway = require('./customer_gateway').CustomerGateway;\nlet DisbursementGateway = require('./disbursement_gateway').DisbursementGateway;\nlet DiscountGateway = require('./discount_gateway').DiscountGateway;\nlet MerchantAccountGateway = require('./merchant_account_gateway').MerchantAccountGateway;\nlet MerchantGateway = require('./merchant_gateway').MerchantGateway;\nlet OAuthGateway = require('./oauth_gateway').OAuthGateway;\nlet PaymentMethodGateway = require('./payment_method_gateway').PaymentMethodGateway;\nlet PaymentMethodNonceGateway = require('./payment_method_nonce_gateway').PaymentMethodNonceGateway;\nlet PayPalAccountGateway = require('./paypal_account_gateway').PayPalAccountGateway;\nlet PlanGateway = require('./plan_gateway').PlanGateway;\nlet SettlementBatchSummaryGateway = require('./settlement_batch_summary_gateway').SettlementBatchSummaryGateway;\nlet SubscriptionGateway = require('./subscription_gateway').SubscriptionGateway;\nlet TestingGateway = require('./testing_gateway').TestingGateway;\nlet TransactionGateway = require('./transaction_gateway').TransactionGateway;\nlet TransparentRedirectGateway = require('./transparent_redirect_gateway').TransparentRedirectGateway;\nlet UsBankAccountGateway = require('./us_bank_account_gateway').UsBankAccountGateway;\nlet WebhookNotificationGateway = require('./webhook_notification_gateway').WebhookNotificationGateway;\nlet WebhookTestingGateway = require('./webhook_testing_gateway').WebhookTestingGateway;\n\nclass BraintreeGateway {\n  constructor(config) {\n    this.config = config;\n    this.http = new Http(this.config);\n    this.addOn = new AddOnGateway(this);\n    this.address = new AddressGateway(this);\n    this.clientToken = new ClientTokenGateway(this);\n    this.creditCard = new CreditCardGateway(this);\n    this.creditCardVerification = new CreditCardVerificationGateway(this);\n    this.customer = new CustomerGateway(this);\n    this.disbursement = new DisbursementGateway(this);\n    this.discount = new DiscountGateway(this);\n    this.merchantAccount = new MerchantAccountGateway(this);\n    this.merchant = new MerchantGateway(this);\n    this.oauth = new OAuthGateway(this);\n    this.paymentMethod = new PaymentMethodGateway(this);\n    this.paymentMethodNonce = new PaymentMethodNonceGateway(this);\n    this.paypalAccount = new PayPalAccountGateway(this);\n    this.plan = new PlanGateway(this);\n    this.settlementBatchSummary = new SettlementBatchSummaryGateway(this);\n    this.subscription = new SubscriptionGateway(this);\n    this.testing = new TestingGateway(this);\n    this.transaction = new TransactionGateway(this);\n    this.transparentRedirect = new TransparentRedirectGateway(this);\n    this.usBankAccount = new UsBankAccountGateway(this);\n    this.webhookNotification = new WebhookNotificationGateway(this);\n    this.webhookTesting = new WebhookTestingGateway(this);\n  }\n}\n\nmodule.exports = {BraintreeGateway: BraintreeGateway};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/http.js":"'use strict';\n\nlet http = require('http');\nlet https = require('https');\nlet Buffer = require('buffer').Buffer;\n\nlet version = require('../../package.json').version;\nlet xml2js = require('xml2js');\nlet exceptions = require('./exceptions');\nlet Util = require('./util').Util;\n\nclass Http {\n  constructor(config) {\n    this.config = config;\n  }\n\n  checkHttpStatus(status) {\n    switch (status.toString()) {\n      case '200':\n      case '201':\n      case '422': return null;\n      case '401': return exceptions.AuthenticationError('Authentication Error'); // eslint-disable-line new-cap\n      case '403': return exceptions.AuthorizationError('Authorization Error'); // eslint-disable-line new-cap\n      case '404': return exceptions.NotFoundError('Not Found'); // eslint-disable-line new-cap\n      case '426': return exceptions.UpgradeRequired('Upgrade Required'); // eslint-disable-line new-cap\n      case '429': return exceptions.TooManyRequestsError('Too Many Requests'); // eslint-disable-line new-cap\n      case '500': return exceptions.ServerError('Server Error'); // eslint-disable-line new-cap\n      case '503': return exceptions.DownForMaintenanceError('Down for Maintenance'); // eslint-disable-line new-cap\n      default: return exceptions.UnexpectedError(`Unexpected HTTP response: ${status}`); // eslint-disable-line new-cap\n    }\n  }\n\n  delete(url, callback) {\n    return this.request('DELETE', url, null, callback);\n  }\n\n  get(url, callback) {\n    return this.request('GET', url, null, callback);\n  }\n\n  post(url, body, callback) {\n    return this.request('POST', url, body, callback);\n  }\n\n  put(url, body, callback) {\n    return this.request('PUT', url, body, callback);\n  }\n\n  request(method, url, body, callback) {\n    let requestBody;\n    let client = this.config.environment.ssl ? https : http;\n\n    let options = {\n      host: this.config.environment.server,\n      port: this.config.environment.port,\n      method,\n      path: url,\n      headers: {\n        Authorization: this.authorizationHeader(),\n        'X-ApiVersion': this.config.apiVersion,\n        Accept: 'application/xml',\n        'Content-Type': 'application/json',\n        'User-Agent': `Braintree Node ${version}`\n      }\n    };\n\n    if (body) {\n      requestBody = JSON.stringify(Util.convertObjectKeysToUnderscores(body));\n\n      options.headers['Content-Length'] = Buffer.byteLength(requestBody).toString();\n    }\n\n    let theRequest = client.request(options, response => {\n      body = '';\n\n      response.on('data', (responseBody) => {\n        body += responseBody;\n      });\n\n      response.on('end', () => {\n        let parser;\n        let error = this.checkHttpStatus(response.statusCode);\n\n        if (error) {\n          callback(error, null);\n          return;\n        }\n        if (body !== ' ') {\n          parser = new xml2js.Parser({\n            explicitRoot: true\n          });\n\n          parser.parseString(body, (err, result) => {\n            if (err) {\n              callback(err);\n            } else {\n              callback(null, Util.convertNodeToObject(result));\n            }\n          });\n        } else {\n          callback(null, null);\n        }\n      });\n\n      response.on('error', function (err) {\n        let error = exceptions.UnexpectedError(`Unexpected response error: ${err}`); // eslint-disable-line new-cap\n\n        callback(error, null);\n      });\n    });\n\n    let timeoutHandler = () => {\n      theRequest.abort();\n      this._aborted = true;\n      let error = exceptions.UnexpectedError('Request timed out'); // eslint-disable-line new-cap\n\n      callback(error, null);\n    };\n\n    theRequest.setTimeout(this.config.timeout, timeoutHandler);\n\n    let requestSocket = null;\n\n    theRequest.on('socket', (socket) => {\n      requestSocket = socket;\n    });\n\n    theRequest.on('error', err => {\n      if (this._aborted) { return; }\n      if (this.config.timeout > 0) {\n        requestSocket.removeListener('timeout', timeoutHandler);\n      }\n      let error = exceptions.UnexpectedError(`Unexpected request error: ${err}`); // eslint-disable-line new-cap\n\n      callback(error, null);\n    });\n\n    if (body) { theRequest.write(requestBody); }\n    return theRequest.end();\n  }\n\n  authorizationHeader() {\n    if (this.config.accessToken) {\n      return `Bearer ${this.config.accessToken}`;\n    } else if (this.config.clientId) {\n      return `Basic ${(new Buffer(this.config.clientId + ':' + this.config.clientSecret)).toString('base64')}`;\n    }\n\n    return `Basic ${(new Buffer(this.config.publicKey + ':' + this.config.privateKey)).toString('base64')}`;\n  }\n}\n\nmodule.exports = {Http: Http};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/exceptions.js":"'use strict';\n\nlet errorTypes = require('./error_types').errorTypes;\n\nfunction errorMaker(type) {\n  return function (message) {\n    let err = new Error(message || '');\n\n    err.type = err.name = type;\n    return err;\n  };\n}\n\nmodule.exports = {\n  AuthenticationError: errorMaker(errorTypes.authenticationError),\n  AuthorizationError: errorMaker(errorTypes.authorizationError),\n  DownForMaintenanceError: errorMaker(errorTypes.downForMaintenanceError),\n  InvalidSignatureError: errorMaker(errorTypes.invalidSignatureError),\n  InvalidChallengeError: errorMaker(errorTypes.invalidChallengeError),\n  InvalidTransparentRedirectHashError: errorMaker(errorTypes.invalidTransparentRedirectHashError),\n  NotFoundError: errorMaker(errorTypes.notFoundError),\n  ServerError: errorMaker(errorTypes.serverError),\n  TestOperationPerformedInProductionError: errorMaker(errorTypes.testOperationPerformedInProductionError),\n  TooManyRequestsError: errorMaker(errorTypes.tooManyRequestsError),\n  UnexpectedError: errorMaker(errorTypes.unexpectedError),\n  InvalidKeysError: errorMaker(errorTypes.invalidKeysError),\n  UpgradeRequired: errorMaker(errorTypes.upgradeRequired)\n};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/error_types.js":"'use strict';\n\nconst errorTypes = {\n  authenticationError: 'authenticationError',\n  authorizationError: 'authorizationError',\n  downForMaintenanceError: 'downForMaintenanceError',\n  invalidSignatureError: 'invalidSignatureError',\n  invalidChallengeError: 'invalidChallengeError',\n  invalidTransparentRedirectHashError: 'invalidTransparentRedirectHashError',\n  notFoundError: 'notFoundError',\n  serverError: 'serverError',\n  testOperationPerformedInProductionError: 'testOperationPerformedInProductionError',\n  unexpectedError: 'unexpectedError',\n  invalidKeysError: 'invalidKeysError',\n  upgradeRequired: 'upgradeRequired'\n};\n\nmodule.exports = {\n  errorTypes: errorTypes\n};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/util.js":"'use strict';\n\nlet semver = require('semver');\nlet exceptions = require('./exceptions');\n\nclass Util {\n  static convertObjectKeysToUnderscores(obj) {\n    let newObj = {};\n\n    for (let key in obj) {\n      if (!obj.hasOwnProperty(key)) {\n        continue;\n      }\n      let value = obj[key];\n      let newKey = Util.toUnderscore(key);\n\n      if (value instanceof Array) {\n        newObj[newKey] =\n          value.map((item) => typeof item === 'object' ? Util.convertObjectKeysToUnderscores(item) : item)\n        ;\n      } else if (typeof value === 'object') {\n        if (value instanceof Date || value === null) {\n          newObj[newKey] = value;\n        } else {\n          newObj[newKey] = Util.convertObjectKeysToUnderscores(value);\n        }\n      } else {\n        newObj[newKey] = value;\n      }\n    }\n    return newObj;\n  }\n\n  static convertNodeToObject(obj) {\n    if (typeof obj === 'object' && obj['@']) {\n      if (obj['@'].type === 'array') {\n        let newArray = [];\n\n        for (let key in obj) {\n          if (!obj.hasOwnProperty(key)) {\n            continue;\n          }\n          let value = obj[key];\n\n          if (key !== '@') {\n            if (value instanceof Array) {\n              for (let item of value) {\n                newArray.push(this.convertNodeToObject(item));\n              }\n            } else {\n              newArray.push(this.convertNodeToObject(value));\n            }\n          }\n        }\n        return newArray;\n      } else if (obj['@'].type === 'collection') {\n        let newObj = {};\n\n        for (let key in obj) {\n          if (!obj.hasOwnProperty(key)) {\n            continue;\n          }\n          let value = obj[key];\n\n          if (key !== '@') {\n            newObj[this.toCamelCase(key)] = this.convertNodeToObject(value);\n          }\n        }\n        return newObj;\n      } else if (obj['@'].nil === 'true') {\n        return null;\n      } else if (obj['@'].type === 'integer') {\n        return parseInt(obj['#'], 10);\n      } else if (obj['@'].type === 'boolean') {\n        return obj['#'] === 'true';\n      }\n\n      return obj['#'];\n    } else if (obj instanceof Array) {\n      return obj.map((item) => this.convertNodeToObject(item));\n    } else if (typeof obj === 'object' && this.objectIsEmpty(obj)) {\n      return '';\n    } else if (typeof obj === 'object') {\n      let newObj = {};\n\n      for (let key in obj) {\n        if (!obj.hasOwnProperty(key)) {\n          continue;\n        }\n        let value = obj[key];\n\n        newObj[this.toCamelCase(key)] = this.convertNodeToObject(value);\n      }\n      return newObj;\n    }\n\n    return obj;\n  }\n\n  static objectIsEmpty(obj) {\n    for (let key in obj) { // eslint-disable-line no-unused-vars\n      if (!obj.hasOwnProperty(key)) {\n        continue;\n      }\n      return false;\n    }\n    return true;\n  }\n\n  static arrayIsEmpty(array) {\n    if (!(array instanceof Array)) { return false; }\n    if (array.length > 0) { return false; }\n    return true;\n  }\n\n  static toCamelCase(string) {\n    return string.replace(/([\\-\\_][a-z0-9])/g, match => match.toUpperCase().replace('-', '').replace('_', ''));\n  }\n\n  static toUnderscore(string) {\n    return string.replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2').replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n  }\n\n  static flatten(array) {\n    while (this._containsArray(array)) {\n      array = array.reduce((first, rest) => {\n        first = first instanceof Array ? first : [first];\n        rest = rest instanceof Array ? this.flatten(rest) : rest;\n        return first.concat(rest);\n      }\n      );\n    }\n    return array;\n  }\n\n  static merge(obj1, obj2) {\n    for (let key in obj2) {\n      if (!obj2.hasOwnProperty(key)) {\n        continue;\n      }\n      let value = obj2[key];\n\n      obj1[key] = value;\n    }\n    return obj1;\n  }\n\n  static without(array1, array2) {\n    let newArray = [];\n\n    for (let value of array1) {\n      if (!this._containsValue(array2, value)) { newArray.push(value); }\n    }\n    return newArray;\n  }\n\n  static supportsStreams2() {\n    return semver.satisfies(process.version, '>=0.10');\n  }\n\n  static flattenKeys(obj, prefix) {\n    let keys = [];\n\n    for (let key in obj) {\n      if (!obj.hasOwnProperty(key)) {\n        continue;\n      }\n      let value = obj[key];\n\n      if (typeof value === 'object') {\n        let keyToPush = prefix ? prefix + '[' + key + ']' : key;\n\n        keys.push(Util.flattenKeys(value, keyToPush));\n      } else if (prefix) {\n        keys.push(prefix + '[' + key + ']');\n      } else {\n        keys.push(key);\n      }\n    }\n\n    return this.flatten(keys);\n  }\n\n  static verifyKeys(keys, obj) { // eslint-disable-line consistent-return\n    let invalidKeys;\n    let unrecognizedKeys = this.without(this.flattenKeys(obj), keys.valid);\n\n    if (keys.ignore) {\n      invalidKeys = unrecognizedKeys.filter(function (key) {\n        for (let ignoredKey of keys.ignore) {\n          if (key.indexOf(ignoredKey) === 0) { return false; }\n        }\n        return true;\n      });\n    } else {\n      invalidKeys = unrecognizedKeys;\n    }\n\n    if (invalidKeys.length > 0) {\n      return exceptions.InvalidKeysError(`These keys are invalid: ${invalidKeys.join(', ')}`); // eslint-disable-line new-cap\n    }\n  }\n\n  static _containsValue(array, element) {\n    return array.indexOf(element) !== -1;\n  }\n\n  static _containsArray(array) {\n    for (let element of array) {\n      if (element instanceof Array) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = {Util: Util};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/add_on_gateway.js":"'use strict';\n\nlet AddOn = require('./add_on').AddOn;\nlet Gateway = require('./gateway').Gateway;\n\nclass AddOnGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  all(callback) {\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/add_ons`, this.createResponseHandler('add_on', AddOn, callback));\n  }\n}\n\nmodule.exports = {AddOnGateway: AddOnGateway};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/add_on.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nclass AddOn extends AttributeSetter {}\n\nmodule.exports = {AddOn: AddOn};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/attribute_setter.js":"'use strict';\n\nclass AttributeSetter {\n  constructor(attributes) {\n    for (let key in attributes) {\n      if (!attributes.hasOwnProperty(key)) {\n        continue;\n      }\n      let value = attributes[key];\n\n      this[key] = value;\n    }\n  }\n}\n\nmodule.exports = {AttributeSetter: AttributeSetter};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/gateway.js":"'use strict';\n\nlet ErrorResponse = require('./error_response').ErrorResponse;\nlet SearchResponse = require('./search_response').SearchResponse;\nlet exceptions = require('./exceptions');\nlet _ = require('underscore');\n\nclass Gateway {\n  createResponseHandler(attributeKlassMap, Klass, callback) {\n    return function (err, response) {\n      if (err) {\n        callback(err, response);\n        return;\n      }\n\n      if (response.apiErrorResponse) {\n        callback(null, new ErrorResponse(response.apiErrorResponse));\n        return;\n      }\n\n      response.success = true;\n      if (attributeKlassMap === null) {\n        callback(null, response);\n        return;\n      } else if (typeof attributeKlassMap === 'string') {\n        let attributeName = attributeKlassMap;\n\n        if (response[attributeName]) {\n          if (Klass != null) { response[attributeName] = new Klass(response[attributeName]); }\n        }\n        callback(null, response);\n        return;\n      }\n      let unknown = true;\n\n      for (let attributeName in attributeKlassMap) {\n        if (!attributeKlassMap.hasOwnProperty(attributeName)) {\n          continue;\n        }\n        Klass = attributeKlassMap[attributeName];\n        if (response[attributeName]) {\n          unknown = false;\n          if (Klass != null) { response[attributeName] = new Klass(response[attributeName]); }\n          callback(null, response);\n        }\n      }\n      if (unknown) {\n        callback(null, response);\n      }\n    };\n  }\n\n  createSearchResponse(url, search, pagingFunction, callback) {\n    if (callback != null) {\n      return this.gateway.http.post(url, {search: search.toHash()}, this.searchResponseHandler(pagingFunction, callback));\n    }\n\n    let searchResponse = new SearchResponse();\n\n    this.gateway.http.post(url, {search: search.toHash()}, function (err, response) {\n      if (err != null) {\n        searchResponse.setFatalError(err);\n      } else if (response.searchResults) {\n        searchResponse.setResponse(response);\n        searchResponse.setPagingFunction(pagingFunction);\n      } else if (response.apiErrorResponse) {\n        searchResponse.setFatalError(new ErrorResponse(response.apiErrorResponse));\n      } else {\n        searchResponse.setFatalError(exceptions.DownForMaintenanceError('Down for Maintenance')); // eslint-disable-line new-cap\n      }\n\n      return searchResponse.ready();\n    });\n\n    return searchResponse.stream;\n  }\n\n  searchResponseHandler(pagingFunction, callback) {\n    return function (err, response) {\n      if (err) { return callback(err, response); }\n      if (response.searchResults) {\n        let container = new SearchResponse(pagingFunction, response);\n\n        return callback(null, container);\n      } else if (response.apiErrorResponse) {\n        return callback(null, new ErrorResponse(response.apiErrorResponse));\n      }\n\n      return callback(exceptions.DownForMaintenanceError('Down for Maintenance'), null); // eslint-disable-line new-cap\n    };\n  }\n\n  pagingFunctionGenerator(search, url, SubjectType, pagedResultsKey, getSubject) {\n    return (ids, callback) => {\n      search.ids().in(ids);\n      this.gateway.http.post(`${this.config.baseMerchantPath()}/` + url + '/advanced_search', {search: search.toHash()}, function (err, response) {\n        if (err) {\n          callback(err, null);\n          return;\n        } else if (pagedResultsKey in response) {\n          if (_.isArray(getSubject(response))) {\n            getSubject(response).map((subject) => {\n              callback(null, new SubjectType(subject));\n            });\n            return;\n          }\n\n          callback(null, new SubjectType(getSubject(response)));\n          return;\n        }\n\n        callback(exceptions.DownForMaintenanceError('Down for Maintenance'), null); // eslint-disable-line new-cap\n      });\n    };\n  }\n}\n\nmodule.exports = {Gateway: Gateway};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/error_response.js":"'use strict';\n\nlet Transaction = require('./transaction').Transaction;\nlet ValidationErrorsCollection = require('./validation_errors_collection').ValidationErrorsCollection;\n\nclass ErrorResponse {\n  constructor(attributes) {\n    for (let key in attributes) {\n      if (!attributes.hasOwnProperty(key)) {\n        continue;\n      }\n      let value = attributes[key];\n\n      this[key] = value;\n    }\n    this.success = false;\n    this.errors = new ValidationErrorsCollection(attributes.errors);\n    if (attributes.transaction) { this.transaction = new Transaction(attributes.transaction); }\n  }\n}\n\nmodule.exports = {ErrorResponse: ErrorResponse};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/transaction.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\nlet ApplePayCard = require('./apple_pay_card').ApplePayCard;\nlet AndroidPayCard = require('./android_pay_card').AndroidPayCard;\nlet CreditCard = require('./credit_card').CreditCard;\nlet PayPalAccount = require('./paypal_account').PayPalAccount;\nlet CoinbaseAccount = require('./coinbase_account').CoinbaseAccount;\nlet DisbursementDetails = require('./disbursement_details').DisbursementDetails;\nlet Dispute = require('./dispute').Dispute;\nlet FacilitatorDetails = require('./facilitator_details').FacilitatorDetails;\nlet RiskData = require('./risk_data').RiskData;\nlet ThreeDSecureInfo = require('./three_d_secure_info').ThreeDSecureInfo;\nlet UsBankAccount = require('./us_bank_account').UsBankAccount;\n\nclass Transaction extends AttributeSetter {\n  static initClass() {\n    this.CreatedUsing = {\n      FullInformation: 'full_information',\n      Token: 'token'\n    };\n\n    this.EscrowStatus = {\n      HoldPending: 'hold_pending',\n      Held: 'held',\n      ReleasePending: 'release_pending',\n      Released: 'released',\n      Refunded: 'refunded'\n    };\n\n    this.Source = {\n      Api: 'api',\n      ControlPanel: 'control_panel',\n      Recurring: 'recurring'\n    };\n\n    this.Type = {\n      Credit: 'credit',\n      Sale: 'sale',\n      All() {\n        let all = [];\n\n        for (let key in this) {\n          if (!this.hasOwnProperty(key)) {\n            continue;\n          }\n          let value = this[key];\n\n          if (key !== 'All') { all.push(value); }\n        }\n        return all;\n      }\n    };\n\n    this.GatewayRejectionReason = {\n      ApplicationIncomplete: 'application_incomplete',\n      Avs: 'avs',\n      Cvv: 'cvv',\n      AvsAndCvv: 'avs_and_cvv',\n      Duplicate: 'duplicate',\n      Fraud: 'fraud',\n      ThreeDSecure: 'three_d_secure'\n    };\n\n    this.IndustryData = {\n      Lodging: 'lodging',\n      TravelAndCruise: 'travel_cruise'\n    };\n\n    this.Status = {\n      AuthorizationExpired: 'authorization_expired',\n      Authorizing: 'authorizing',\n      Authorized: 'authorized',\n      GatewayRejected: 'gateway_rejected',\n      Failed: 'failed',\n      ProcessorDeclined: 'processor_declined',\n      Settled: 'settled',\n      Settling: 'settling',\n      SettlementConfirmed: 'settlement_confirmed',\n      SettlementDeclined: 'settlement_declined',\n      SettlementPending: 'settlement_pending',\n      SubmittedForSettlement: 'submitted_for_settlement',\n      Voided: 'voided',\n      All() {\n        let all = [];\n\n        for (let key in this) {\n          if (!this.hasOwnProperty(key)) {\n            continue;\n          }\n          let value = this[key];\n\n          if (key !== 'All') { all.push(value); }\n        }\n        return all;\n      }\n    };\n  }\n\n  constructor(attributes) {\n    super(attributes);\n    this.creditCard = new CreditCard(attributes.creditCard);\n    this.paypalAccount = new PayPalAccount(attributes.paypal);\n    this.coinbaseAccount = new CoinbaseAccount(attributes.coinbaseAccount);\n    this.applePayCard = new ApplePayCard(attributes.applePay);\n    this.androidPayCard = new AndroidPayCard(attributes.androidPayCard);\n    this.disbursementDetails = new DisbursementDetails(attributes.disbursementDetails);\n    if (attributes.disputes != null) { this.disputes = attributes.disputes.map((disputeAttributes) => new Dispute(disputeAttributes)); }\n    if (attributes.facilitatorDetails) { this.facilitatorDetails = new FacilitatorDetails(attributes.facilitatorDetails); }\n    if (attributes.riskData) { this.riskData = new RiskData(attributes.riskData); }\n    if (attributes.threeDSecureInfo) { this.threeDSecureInfo = new ThreeDSecureInfo(attributes.threeDSecureInfo); }\n    if (attributes.usBankAccount) { this.usBankAccount = new UsBankAccount(attributes.usBankAccount); }\n  }\n\n  isDisbursed() {\n    return this.disbursementDetails.isValid();\n  }\n}\nTransaction.initClass();\n\nmodule.exports = {Transaction: Transaction};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/apple_pay_card.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nclass ApplePayCard extends AttributeSetter {\n  constructor(attributes) {\n    super(attributes);\n  }\n}\n\nmodule.exports = {ApplePayCard: ApplePayCard};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/android_pay_card.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nclass AndroidPayCard extends AttributeSetter {\n  constructor(attributes) {\n    super(attributes);\n\n    if (attributes) {\n      this.cardType = attributes.virtualCardType;\n      this.last4 = attributes.virtualCardLast4;\n    }\n  }\n}\n\nmodule.exports = {AndroidPayCard: AndroidPayCard};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/credit_card.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\nlet CreditCardVerification = require('./credit_card_verification').CreditCardVerification;\n\nclass CreditCard extends AttributeSetter {\n  static initClass() {\n    this.CardType = {\n      AmEx: 'American Express',\n      CarteBlanche: 'Carte Blanche',\n      ChinaUnionPay: 'China UnionPay',\n      DinersClubInternational: 'Diners Club',\n      Discover: 'Discover',\n      JCB: 'JCB',\n      Laser: 'Laser',\n      Maestro: 'Maestro',\n      MasterCard: 'MasterCard',\n      Solo: 'Solo',\n      Switch: 'Switch',\n      Visa: 'Visa',\n      Unknown: 'Unknown',\n      All() {\n        let all = [];\n\n        for (let key in this) {\n          if (!this.hasOwnProperty(key)) {\n            continue;\n          }\n          let value = this[key];\n\n          if (key !== 'All') { all.push(value); }\n        }\n        return all;\n      }\n    };\n\n    this.CustomerLocation = {\n      International: 'international',\n      US: 'us'\n    };\n\n    this.CardTypeIndicator = {\n      Yes: 'Yes',\n      No: 'No',\n      Unknown: 'Unknown'\n    };\n\n    this.Prepaid = this.Commercial = this.Payroll = this.Healthcare = this.DurbinRegulated =\n      this.Debit = this.CountryOfIssuance = this.IssuingBank = this.ProductId = this.CardTypeIndicator;\n  }\n\n  constructor(attributes) {\n    super(attributes);\n    this.maskedNumber = `${this.bin}******${this.last4}`;\n    this.expirationDate = `${this.expirationMonth}/${this.expirationYear}`;\n    if (attributes) {\n      let sortedVerifications = (attributes.verifications || []).sort((a, b) => b.created_at - a.created_at);\n\n      if (sortedVerifications[0]) { this.verification = new CreditCardVerification(sortedVerifications[0]); }\n    }\n  }\n}\nCreditCard.initClass();\n\nmodule.exports = {CreditCard: CreditCard};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/credit_card_verification.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\nlet RiskData = require('./risk_data').RiskData;\n\nclass CreditCardVerification extends AttributeSetter {\n  static initClass() {\n    this.StatusType = {\n      Failed: 'failed',\n      GatewayRejected: 'gateway_rejected',\n      ProcessorDeclined: 'processor_declined',\n      Verified: 'verified',\n      All() {\n        let all = [];\n\n        for (let key in this) {\n          if (!this.hasOwnProperty(key)) {\n            continue;\n          }\n          let value = this[key];\n\n          if (key !== 'All') { all.push(value); }\n        }\n        return all;\n      }\n    };\n  }\n\n  constructor(attributes) {\n    super(attributes);\n    if (attributes.riskData) { this.riskData = new RiskData(attributes.riskData); }\n  }\n}\nCreditCardVerification.initClass();\n\nmodule.exports = {CreditCardVerification: CreditCardVerification};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/risk_data.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nclass RiskData extends AttributeSetter {\n  constructor(attributes) {\n    super(attributes);\n  }\n}\n\nmodule.exports = {RiskData: RiskData};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/paypal_account.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nclass PayPalAccount extends AttributeSetter {\n  constructor(attributes) {\n    super(attributes);\n  }\n}\n\nmodule.exports = {PayPalAccount: PayPalAccount};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/coinbase_account.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nclass CoinbaseAccount extends AttributeSetter {\n  constructor(attributes) {\n    super(attributes);\n  }\n}\n\nmodule.exports = {CoinbaseAccount: CoinbaseAccount};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/disbursement_details.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nclass DisbursementDetails extends AttributeSetter {\n  isValid() {\n    return this.disbursementDate != null;\n  }\n}\n\nmodule.exports = {DisbursementDetails: DisbursementDetails};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/dispute.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\nlet TransactionDetails = require('./transaction_details').TransactionDetails;\n\nclass Dispute extends AttributeSetter {\n  static initClass() {\n    this.Status = {\n      Open: 'open',\n      Lost: 'lost',\n      Won: 'won'\n    };\n    this.Reason = {\n      CancelledRecurringTransaction: 'cancelled_recurring_transaction',\n      CreditNotProcessed: 'credit_not_processed',\n      Duplicate: 'duplicate',\n      Fraud: 'fraud',\n      General: 'general',\n      InvalidAccount: 'invalid_account',\n      NotRecognized: 'not_recognized',\n      ProductNotReceived: 'product_not_received',\n      ProductUnsatisfactory: 'product_unsatisfactory',\n      Retrieval: 'retrieval',\n      TransactionAmountDiffers: 'transaction_amount_differs'\n    };\n    this.Kind = {\n      Chargeback: 'chargeback',\n      PreArbitration: 'pre_arbitration',\n      Retrieval: 'retrieval'\n    };\n  }\n\n  constructor(attributes) {\n    super(attributes);\n    this.transactionDetails = new TransactionDetails(attributes.transaction);\n  }\n}\nDispute.initClass();\n\nmodule.exports = {Dispute: Dispute};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/transaction_details.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nclass TransactionDetails extends AttributeSetter {\n  constructor(attributes) {\n    super(attributes);\n  }\n}\n\nmodule.exports = {TransactionDetails: TransactionDetails};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/facilitator_details.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nclass FacilitatorDetails extends AttributeSetter {\n  constructor(attributes) {\n    super(attributes);\n  }\n}\n\nmodule.exports = {FacilitatorDetails: FacilitatorDetails};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/three_d_secure_info.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nclass ThreeDSecureInfo extends AttributeSetter {\n  constructor(attributes) {\n    super(attributes);\n  }\n}\n\nmodule.exports = {ThreeDSecureInfo: ThreeDSecureInfo};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/us_bank_account.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\nlet AchMandate = require('./ach_mandate').AchMandate;\n\nclass UsBankAccount extends AttributeSetter {\n  constructor(attributes) {\n    super(attributes);\n    this.achMandate = new AchMandate(this.achMandate);\n  }\n}\n\nmodule.exports = {UsBankAccount: UsBankAccount};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/ach_mandate.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nclass AchMandate extends AttributeSetter {\n  constructor(attributes) {\n    super(attributes);\n    this.acceptedAt = new Date(this.acceptedAt);\n  }\n}\n\nmodule.exports = {AchMandate: AchMandate};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/validation_errors_collection.js":"'use strict';\n\nlet Util = require('./util').Util;\nlet ValidationError = require('./validation_error').ValidationError;\n\nclass ValidationErrorsCollection {\n  constructor(errorAttributes) {\n    this.validationErrors = {};\n    this.errorCollections = {};\n\n    for (let key in errorAttributes) {\n      if (!errorAttributes.hasOwnProperty(key)) {\n        continue;\n      }\n      let val = errorAttributes[key];\n\n      if (key === 'errors') {\n        this.buildErrors(val);\n      } else {\n        this.errorCollections[key] = new ValidationErrorsCollection(val);\n      }\n    }\n  }\n\n  buildErrors(errors) {\n    return errors.map((item) => {\n      let key = Util.toCamelCase(item.attribute);\n\n      this.validationErrors[key] = this.validationErrors[key] || [];\n\n      return this.validationErrors[key].push(new ValidationError(item));\n    });\n  }\n\n  deepErrors() {\n    let errors = [];\n\n    for (let key in this.validationErrors) {\n      if (!this.validationErrors.hasOwnProperty(key)) {\n        continue;\n      }\n      let val = this.validationErrors[key];\n\n      errors = errors.concat(val);\n    }\n\n    for (let key in this.errorCollections) {\n      if (!this.errorCollections.hasOwnProperty(key)) {\n        continue;\n      }\n      let val = this.errorCollections[key];\n\n      errors = errors.concat(val.deepErrors());\n    }\n\n    return errors;\n  }\n\n  for(name) {\n    return this.errorCollections[name];\n  }\n\n  forIndex(index) {\n    return this.errorCollections[`index${index}`];\n  }\n\n  on(name) {\n    return this.validationErrors[name];\n  }\n}\n\nmodule.exports = {ValidationErrorsCollection: ValidationErrorsCollection};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/validation_error.js":"'use strict';\n\nclass ValidationError {\n  constructor(error) {\n    this.attribute = error.attribute;\n    this.code = error.code;\n    this.message = error.message;\n  }\n}\n\nmodule.exports = {ValidationError: ValidationError};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/search_response.js":"'use strict';\n\nlet _ = require('underscore');\nlet SearchResponseStream = require('./search_response_stream').SearchResponseStream;\n\nclass SearchResponse {\n  constructor(pagingFunction, results) {\n    if (pagingFunction != null) {\n      this.setPagingFunction(pagingFunction);\n    }\n\n    if (results != null) {\n      this.setResponse(results);\n    }\n\n    this.stream = new SearchResponseStream(this);\n\n    this.success = true;\n  }\n\n  each(callback) {\n    return _.each(_.range(0, this.ids.length, this.pageSize), offset => {\n      return this.pagingFunction(this.ids.slice(offset, offset + this.pageSize), callback);\n    });\n  }\n\n  first(callback) {\n    if (this.ids.length === 0) {\n      return callback(null, null);\n    }\n\n    return this.pagingFunction([this.ids[0]], callback);\n  }\n\n  length() {\n    return this.ids.length;\n  }\n\n  ready() {\n    return this.stream.ready();\n  }\n\n  setFatalError(error) {\n    this.fatalError = error;\n  }\n\n  setResponse(results) {\n    this.ids = results.searchResults.ids;\n    this.pageSize = parseInt(results.searchResults.pageSize, 10);\n  }\n\n  setPagingFunction(pagingFunction) {\n    this.pagingFunction = pagingFunction;\n  }\n}\n\nmodule.exports = {SearchResponse: SearchResponse};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/search_response_stream.js":"'use strict';\n\nlet Readable = require('stream').Readable || require('readable-stream').Readable;\n\nclass SearchResponseStream extends Readable {\n  constructor(searchResponse) {\n    super({objectMode: true});\n\n    this.searchResponse = searchResponse;\n    this.currentItem = 0;\n    this.currentOffset = 0;\n    this.bufferedResults = [];\n  }\n\n  nextItem() {\n    if (this.searchResponse.fatalError != null) {\n      this.emit('error', this.searchResponse.fatalError);\n      this.push(null);\n      return;\n    } else if (this.bufferedResults.length > 0) {\n      this.pushBufferedResults();\n      return;\n    } else if (this.currentItem >= this.searchResponse.ids.length) {\n      this.push(null);\n      return;\n    }\n\n    let index = 0;\n\n    this.searchResponse.pagingFunction(this.searchResponse.ids.slice(this.currentOffset, this.currentOffset + this.searchResponse.pageSize), (err, item) => {\n      if (err != null) {\n        this.emit('error', err);\n      } else {\n        this.bufferedResults.push(item);\n      }\n\n      this.currentItem += 1;\n      index += 1;\n\n      if (index === this.searchResponse.pageSize || this.currentItem === this.searchResponse.ids.length) {\n        this.push(this.bufferedResults.shift());\n      }\n    });\n\n    this.currentOffset += this.searchResponse.pageSize;\n  }\n\n  pushBufferedResults() {\n    return (() => {\n      let result1 = [];\n\n      while (this.bufferedResults.length > 0) {\n        let item;\n        let result = this.push(this.bufferedResults.shift());\n\n        if (result === false) { break; }\n        result1.push(item);\n      }\n      return result1;\n    })();\n  }\n\n  ready() {\n    this.readyToStart = true;\n    return this.emit('ready');\n  }\n\n  _read() {\n    if (this.readyToStart != null) {\n      return this.nextItem();\n    }\n\n    return this.on('ready', () => {\n      return this.nextItem();\n    });\n  }\n}\n\nmodule.exports = {SearchResponseStream: SearchResponseStream};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/address_gateway.js":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet Address = require('./address').Address;\nlet exceptions = require('./exceptions');\n\nclass AddressGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  create(attributes, callback) {\n    let customerId = attributes.customerId;\n\n    delete attributes.customerId;\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/customers/${customerId}/addresses`, {address: attributes}, this.responseHandler(callback));\n  }\n\n  delete(customerId, id, callback) {\n    return this.gateway.http.delete(`${this.config.baseMerchantPath()}/customers/${customerId}/addresses/${id}`, callback);\n  }\n\n  find(customerId, id, callback) {\n    if (customerId.trim() === '' || id.trim() === '') {\n      return callback(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/customers/${customerId}/addresses/${id}`, function (err, response) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, response.address);\n    });\n  }\n\n  update(customerId, id, attributes, callback) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/customers/${customerId}/addresses/${id}`, {address: attributes}, this.responseHandler(callback));\n  }\n\n  responseHandler(callback) {\n    return this.createResponseHandler('address', Address, callback);\n  }\n\n  sharedSignature(prefix) {\n    let signatureKeys = [\n      'company', 'countryCodeAlpha2', 'countryCodeAlpha3', 'countryCodeNumeric',\n      'countryName', 'extendedAddress', 'firstName',\n      'lastName', 'locality', 'postalCode', 'region', 'streetAddress'\n    ];\n\n    let signature = [];\n\n    for (let val of signatureKeys) {\n      signature.push(prefix + '[' + val + ']');\n    }\n\n    return signature;\n  }\n}\n\nmodule.exports = {AddressGateway: AddressGateway};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/address.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nclass Address extends AttributeSetter {}\n\nmodule.exports = {Address: Address};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/client_token_gateway.js":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet ErrorResponse = require('./error_response').ErrorResponse;\nlet Util = require('./util').Util;\nlet exceptions = require('./exceptions');\n\nlet DEFAULT_VERSION = 2;\n\nclass ClientTokenGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  generate(params, callback) {\n    let err;\n\n    params = params || {};\n\n    if (!params.version) { params.version = DEFAULT_VERSION; }\n\n    err = Util.verifyKeys(this._generateSignature(), params);\n\n    if (!err) {\n      err = this.validateParams(params);\n    }\n\n    if (err) {\n      callback(err, null);\n      return;\n    }\n    params = {client_token: params}; // eslint-disable-line camelcase\n\n    let responseHandler = this.responseHandler(callback);\n\n    this.gateway.http.post(`${this.config.baseMerchantPath()}/client_token`, params, responseHandler);\n  }\n\n  validateParams(params) {\n    if (params.customerId || !params.options) { return; }\n\n    let options = ['makeDefault', 'verifyCard', 'failOnDuplicatePaymentMethod'];\n    let invalidOptions = options.filter((name) => params.options[name]).map((name) => name);\n\n    if (invalidOptions.length > 0) {\n      return exceptions.UnexpectedError(`A customer id is required for the following options: ${invalidOptions.join(', ')}`); // eslint-disable-line consistent-return, new-cap\n    }\n\n    return null; // eslint-disable-line consistent-return\n  }\n\n  responseHandler(callback) {\n    return function (err, response) {\n      if (err) {\n        callback(err, response);\n        return;\n      }\n\n      if (response.clientToken) {\n        response.success = true;\n        response.clientToken = response.clientToken.value;\n        callback(null, response);\n      } else if (response.apiErrorResponse) {\n        callback(null, new ErrorResponse(response.apiErrorResponse));\n      }\n    };\n  }\n\n  _generateSignature() {\n    return {\n      valid: [\n        'addressId', 'customerId', 'proxyMerchantId', 'merchantAccountId',\n        'version', 'sepaMandateAcceptanceLocation', 'sepaMandateType',\n        'options', 'options[makeDefault]', 'options[verifyCard]', 'options[failOnDuplicatePaymentMethod]'\n      ]\n    };\n  }\n}\n\nmodule.exports = {ClientTokenGateway: ClientTokenGateway};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/credit_card_gateway.js":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet CreditCard = require('./credit_card').CreditCard;\nlet exceptions = require('./exceptions');\n\nclass CreditCardGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  create(attributes, callback) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/payment_methods`, {creditCard: attributes}, this.responseHandler(callback));\n  }\n\n  delete(token, callback) {\n    return this.gateway.http.delete(`${this.config.baseMerchantPath()}/payment_methods/credit_card/${token}`, callback);\n  }\n\n  find(token, callback) {\n    if (token.trim() === '') {\n      return callback(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/payment_methods/credit_card/${token}`, function (err, response) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, new CreditCard(response.creditCard));\n    });\n  }\n\n  fromNonce(nonce, callback) {\n    if (nonce.trim() === '') {\n      return callback(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/payment_methods/from_nonce/${nonce}`, function (err, response) {\n      if (err) {\n        err.message = `Payment method with nonce ${nonce} locked, consumed or not found`;\n        return callback(err, null);\n      }\n\n      return callback(null, new CreditCard(response.creditCard));\n    });\n  }\n\n  update(token, attributes, callback) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/payment_methods/credit_card/${token}`, {creditCard: attributes}, this.responseHandler(callback));\n  }\n\n  responseHandler(callback) {\n    return this.createResponseHandler('creditCard', CreditCard, callback);\n  }\n\n  expired(callback) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/payment_methods/all/expired_ids`, {}, this.searchResponseHandler(this, callback));\n  }\n\n  expiringBetween(after, before, callback) {\n    let url = `${this.config.baseMerchantPath()}/payment_methods/all/expiring_ids?start=${this.dateFormat(after)}&end=${this.dateFormat(before)}`;\n\n    return this.gateway.http.post(url, {}, this.searchResponseHandler(this, callback));\n  }\n\n  dateFormat(date) {\n    let month = date.getMonth() + 1;\n\n    if (month < 10) {\n      month = `0${month}`;\n    } else {\n      month = `${month}`;\n    }\n    return month + date.getFullYear();\n  }\n}\n\nmodule.exports = {CreditCardGateway: CreditCardGateway};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/credit_card_verification_gateway.js":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet CreditCardVerification = require('./credit_card_verification').CreditCardVerification;\nlet CreditCardVerificationSearch = require('./credit_card_verification_search').CreditCardVerificationSearch;\nlet _ = require('underscore');\nlet exceptions = require('./exceptions');\n\nclass CreditCardVerificationGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  find(creditCardVerificationId, callback) {\n    if (creditCardVerificationId.trim() === '') {\n      return callback(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/verifications/${creditCardVerificationId}`, function (err, response) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, new CreditCardVerification(response.verification));\n    });\n  }\n\n  search(fn, callback) {\n    let search = new CreditCardVerificationSearch();\n\n    fn(search);\n    return this.createSearchResponse(`${this.config.baseMerchantPath()}/verifications/advanced_search_ids`, search, this.pagingFunctionGenerator(search), callback);\n  }\n\n  create(params, callback) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/verifications`,\n                       {verification: params},\n                       this.createResponseHandler('verification', CreditCardVerification, callback));\n  }\n\n  responseHandler(callback) {\n    return this.createResponseHandler('creditCardVerification', CreditCardVerification, callback);\n  }\n\n  pagingFunctionGenerator(search) {\n    return (ids, callback) => {\n      let searchCriteria = search.toHash();\n\n      searchCriteria.ids = ids;\n      return this.gateway.http.post(`${this.config.baseMerchantPath()}/verifications/advanced_search`,\n        {search: searchCriteria},\n        function (err, response) {\n          if (err) {\n            return callback(err, null);\n          } else if (_.isArray(response.creditCardVerifications.verification)) {\n            return response.creditCardVerifications.verification.map((creditCardVerification) =>\n                callback(null, new CreditCardVerification(creditCardVerification)));\n          }\n\n          return callback(null, new CreditCardVerification(response.creditCardVerifications.verification));\n        });\n    };\n  }\n}\n\nmodule.exports = {CreditCardVerificationGateway: CreditCardVerificationGateway};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/credit_card_verification_search.js":"'use strict';\n\nlet AdvancedSearch = require('./advanced_search').AdvancedSearch;\nlet CreditCard = require('./credit_card').CreditCard;\nlet CreditCardVerification = require('./credit_card_verification').CreditCardVerification;\n\nclass CreditCardVerificationSearch extends AdvancedSearch {\n  static initClass() {\n    this.textFields(\n        'billingAddressDetailsPostalCode',\n        'creditCardCardholderName',\n        'customerEmail',\n        'customerId',\n        'id',\n        'paymentMethodToken'\n      );\n\n    this.equalityFields('creditCardExpirationDate');\n\n    this.partialMatchFields('creditCardNumber');\n\n    this.multipleValueField('creditCardCardType', {allows: CreditCard.CardType.All()}); // eslint-disable-line new-cap\n    this.multipleValueField('status', {allows: CreditCardVerification.StatusType.All()}); // eslint-disable-line new-cap\n    this.multipleValueField('ids');\n\n    this.rangeFields('createdAt');\n  }\n}\nCreditCardVerificationSearch.initClass();\n\nmodule.exports = {CreditCardVerificationSearch: CreditCardVerificationSearch};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/advanced_search.js":"'use strict';\n\n/* eslint-disable no-invalid-this, no-use-before-define */\nlet Util = require('./util').Util;\nlet _ = require('underscore');\n\nfunction argsToArray(argsObject) {\n  return Array.prototype.slice.call(argsObject);\n}\n\nclass AdvancedSearch {\n  static equalityFields() {\n    let fields = argsToArray(arguments);\n\n    return this._createFieldAccessors(fields, EqualityNode);\n  }\n\n  static partialMatchFields() {\n    let fields = argsToArray(arguments);\n\n    return this._createFieldAccessors(fields, PartialMatchNode);\n  }\n\n  static textFields() {\n    let fields = argsToArray(arguments);\n\n    return this._createFieldAccessors(fields, TextNode);\n  }\n\n  static keyValueFields() {\n    let fields = argsToArray(arguments);\n\n    return this._createFieldAccessors(fields, KeyValueNode);\n  }\n\n  static multipleValueField(field, options) {\n    options = options || {};\n    return this._createFieldAccessors([field], MultipleValueNode, options);\n  }\n\n  static multipleValueOrTextField(field, options) {\n    options = options || {};\n    return this._createFieldAccessors([field], MultipleValueOrTextNode, options);\n  }\n\n  static rangeFields() {\n    let fields = argsToArray(arguments);\n\n    return this._createFieldAccessors(fields, RangeNode);\n  }\n\n  static _createFieldAccessors(fields, nodeClass, options) {\n    return fields.map((field) => {\n      this.prototype[field] = this._fieldTemplate(field, nodeClass, options);\n      return this.prototype[field];\n    });\n  }\n\n  static _fieldTemplate(field, NodeClass, options) {\n    return function () { return new NodeClass(field, this, options); };\n  }\n\n  constructor() { this.criteria = {}; }\n\n  addCriteria(key, value) { // eslint-disable-line consistent-return\n    if (this.criteria[key] === Object(this.criteria[key]) && !_.isArray(this.criteria[key])) {\n      return Util.merge(this.criteria[key], value);\n    }\n\n    this.criteria[key] = value;\n  }\n\n  toHash() { return this.criteria; }\n}\n\nclass SearchNode {\n  static operators() {\n    let operators = argsToArray(arguments);\n\n    let operatorTemplate = operator => { // eslint-disable-line func-style\n      return function (value) {\n        let criterion = {};\n\n        criterion[operator] = `${value}`;\n        return this.parent.addCriteria(this.nodeName, criterion);\n      };\n    };\n\n    return operators.map((operator) => {\n      this.prototype[operator] = operatorTemplate(operator);\n    });\n  }\n\n  constructor(nodeName, parent) {\n    this.nodeName = nodeName;\n    this.parent = parent;\n  }\n}\n\nclass EqualityNode extends SearchNode {\n  static initClass() {\n    this.operators('is', 'isNot');\n  }\n}\nEqualityNode.initClass();\n\nclass PartialMatchNode extends EqualityNode {\n  static initClass() {\n    this.operators('endsWith', 'startsWith');\n  }\n}\nPartialMatchNode.initClass();\n\nclass TextNode extends PartialMatchNode {\n  static initClass() {\n    this.operators('contains');\n  }\n}\nTextNode.initClass();\n\nclass KeyValueNode extends SearchNode {\n  is(value) { return this.parent.addCriteria(this.nodeName, value); }\n}\n\nclass MultipleValueNode extends SearchNode {\n  constructor(nodeName, parent, options) {\n    super(nodeName, parent);\n    this.options = options;\n  }\n\n  allowedValues() { return this.options.allows; }\n\n  in() {\n    let values = argsToArray(arguments);\n\n    values = Util.flatten(values);\n\n    if (__guardMethod__(this, 'allowedValues', o => o.allowedValues())) {\n      let allowedValues = this.allowedValues();\n      let badValues = Util.without(values, allowedValues);\n\n      if (!Util.arrayIsEmpty(badValues)) { throw new Error(`Invalid argument(s) for ${this.nodeName}`); }\n    }\n\n    return this.parent.addCriteria(this.nodeName, values);\n  }\n\n  is(value) { return this.in(value); }\n}\n\nclass MultipleValueOrTextNode extends MultipleValueNode {\n  static initClass() {\n    this.delegators('contains', 'endsWith', 'is', 'isNot', 'startsWith');\n  }\n\n  static delegators() {\n    let delegatedMethods = argsToArray(arguments);\n    let delegatorTemplate = methodName => { // eslint-disable-line func-style\n      return function (value) { return this.textNode[methodName](value); };\n    };\n\n    return delegatedMethods.map((methodName) => {\n      this.prototype[methodName] = delegatorTemplate(methodName);\n    });\n  }\n\n  constructor(nodeName, parent, options) {\n    super(nodeName, parent, options);\n    this.textNode = new TextNode(nodeName, parent);\n  }\n}\nMultipleValueOrTextNode.initClass();\n\nclass RangeNode extends SearchNode {\n  static initClass() {\n    this.operators('is');\n  }\n\n  between(min, max) {\n    this.min(min);\n    return this.max(max);\n  }\n\n  max(value) {\n    return this.parent.addCriteria(this.nodeName, {max: value});\n  }\n\n  min(value) {\n    return this.parent.addCriteria(this.nodeName, {min: value});\n  }\n}\nRangeNode.initClass();\n\nmodule.exports = {AdvancedSearch: AdvancedSearch};\n\nfunction __guardMethod__(obj, methodName, transform) { // eslint-disable-line consistent-return\n  if (typeof obj !== 'undefined' && obj !== null && typeof obj[methodName] === 'function') {\n    return transform(obj, methodName);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/customer_gateway.js":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet Customer = require('./customer').Customer;\nlet CustomerSearch = require('./customer_search').CustomerSearch;\nlet exceptions = require('./exceptions');\n\nclass CustomerGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  create(attributes, callback) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/customers`, {customer: attributes}, this.responseHandler(callback));\n  }\n\n  delete(customerId, callback) {\n    return this.gateway.http.delete(`${this.config.baseMerchantPath()}/customers/${customerId}`, callback);\n  }\n\n  find(customerId, callback) {\n    if (customerId.trim() === '') {\n      return callback(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/customers/${customerId}`, function (err, response) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, new Customer(response.customer));\n    });\n  }\n\n  update(customerId, attributes, callback) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/customers/${customerId}`, {customer: attributes}, this.responseHandler(callback));\n  }\n\n  search(fn, callback) {\n    let search = new CustomerSearch();\n\n    fn(search);\n    return this.createSearchResponse(`${this.config.baseMerchantPath()}/customers/advanced_search_ids`, search, this.pagingFunctionGenerator(search), callback);\n  }\n\n  responseHandler(callback) {\n    return this.createResponseHandler('customer', Customer, callback);\n  }\n\n  pagingFunctionGenerator(search) {\n    return super.pagingFunctionGenerator(search, 'customers', Customer, 'customers', response => response.customers.customer);\n  }\n}\n\nmodule.exports = {CustomerGateway: CustomerGateway};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/customer.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\nlet ApplePayCard = require('./apple_pay_card').ApplePayCard;\nlet AndroidPayCard = require('./android_pay_card').AndroidPayCard;\nlet AmexExpressCheckoutCard = require('./amex_express_checkout_card').AmexExpressCheckoutCard;\nlet CreditCard = require('./credit_card').CreditCard;\nlet PayPalAccount = require('./paypal_account').PayPalAccount;\nlet CoinbaseAccount = require('./coinbase_account').CoinbaseAccount;\nlet VenmoAccount = require('./venmo_account').VenmoAccount;\nlet UsBankAccount = require('./us_bank_account').UsBankAccount;\n\nclass Customer extends AttributeSetter {\n  constructor(attributes) {\n    super(attributes);\n    this.paymentMethods = [];\n\n    if (attributes.creditCards) {\n      this.creditCards = attributes.creditCards.map((cardAttributes) => new CreditCard(cardAttributes));\n      this._addPaymentMethods(this.creditCards);\n    }\n\n    if (attributes.applePayCards) {\n      this.applePayCards = attributes.applePayCards.map((cardAttributes) => new ApplePayCard(cardAttributes));\n      this._addPaymentMethods(this.applePayCards);\n    }\n\n    if (attributes.androidPayCards) {\n      this.androidPayCards = attributes.androidPayCards.map((cardAttributes) => new AndroidPayCard(cardAttributes));\n      this._addPaymentMethods(this.androidPayCards);\n    }\n\n    if (attributes.amexExpressCheckoutCards) {\n      this.amexExpressCheckoutCards = attributes.amexExpressCheckoutCards.map((cardAttributes) => new AmexExpressCheckoutCard(cardAttributes));\n      this._addPaymentMethods(this.amexExpressCheckoutCards);\n    }\n\n    if (attributes.paypalAccounts) {\n      this.paypalAccounts = attributes.paypalAccounts.map((paypalAccountAttributes) => new PayPalAccount(paypalAccountAttributes));\n      this._addPaymentMethods(this.paypalAccounts);\n    }\n\n    if (attributes.coinbaseAccounts) {\n      this.coinbaseAccounts = attributes.coinbaseAccounts.map((coinbaseAccountAttributes) => new CoinbaseAccount(coinbaseAccountAttributes));\n      this._addPaymentMethods(this.coinbaseAccounts);\n    }\n\n    if (attributes.venmoAccounts) {\n      this.venmoAccounts = attributes.venmoAccounts.map((venmoAccountAttributes) => new VenmoAccount(venmoAccountAttributes));\n      this._addPaymentMethods(this.venmoAccounts);\n    }\n\n    if (attributes.usBankAccounts) {\n      this.usBankAccounts = attributes.usBankAccounts.map((usBankAccountAttributes) => new UsBankAccount(usBankAccountAttributes));\n      this._addPaymentMethods(this.usBankAccounts);\n    }\n  }\n\n  _addPaymentMethods(paymentMethods) {\n    return paymentMethods.map((paymentMethod) =>\n      this.paymentMethods.push(paymentMethod));\n  }\n}\n\nmodule.exports = {Customer: Customer};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/amex_express_checkout_card.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nclass AmexExpressCheckoutCard extends AttributeSetter {\n  constructor(attributes) {\n    super(attributes);\n  }\n}\n\nmodule.exports = {AmexExpressCheckoutCard: AmexExpressCheckoutCard};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/venmo_account.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nclass VenmoAccount extends AttributeSetter {\n  constructor(attributes) {\n    super(attributes);\n  }\n}\n\nmodule.exports = {VenmoAccount: VenmoAccount};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/customer_search.js":"'use strict';\n\nlet AdvancedSearch = require('./advanced_search').AdvancedSearch;\n\nclass CustomerSearch extends AdvancedSearch {\n  static initClass() {\n    this.textFields(\n      'addressCountryName',\n      'addressExtendedAddress',\n      'addressFirstName',\n      'addressLastName',\n      'addressLocality',\n      'addressPostalCode',\n      'addressRegion',\n      'addressStreetAddress',\n      'cardholderName',\n      'company',\n      'email',\n      'fax',\n      'firstName',\n      'id',\n      'lastName',\n      'paymentMethodToken',\n      'paypalAccountEmail',\n      'phone',\n      'website',\n      'paymentMethodTokenWithDuplicates'\n    );\n\n    this.equalityFields('creditCardExpirationDate');\n    this.partialMatchFields('creditCardNumber');\n    this.multipleValueField('ids');\n    this.rangeFields('createdAt');\n  }\n}\nCustomerSearch.initClass();\n\nmodule.exports = {CustomerSearch: CustomerSearch};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/disbursement_gateway.js":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\n\nclass DisbursementGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  transactions(disbursement, callback) {\n    let transactionIds = disbursement.transactionIds;\n\n    return this.gateway.transaction.search(search => search.ids().in(transactionIds), callback);\n  }\n}\n\nmodule.exports = {DisbursementGateway: DisbursementGateway};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/discount_gateway.js":"'use strict';\n\nlet Discount = require('./discount').Discount;\nlet Gateway = require('./gateway').Gateway;\n\nclass DiscountGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  all(callback) {\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/discounts`, this.createResponseHandler('discount', Discount, callback));\n  }\n}\n\nmodule.exports = {DiscountGateway: DiscountGateway};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/discount.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nclass Discount extends AttributeSetter {}\n\nmodule.exports = {Discount: Discount};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/merchant_account_gateway.js":"'use strict';\n\nlet _ = require('underscore');\nlet Gateway = require('./gateway').Gateway;\nlet MerchantAccount = require('./merchant_account').MerchantAccount;\nlet PaginatedResponse = require('./paginated_response').PaginatedResponse;\nlet exceptions = require('./exceptions');\n\nclass MerchantAccountGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  create(attributes, callback) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/merchant_accounts/create_via_api`, {merchantAccount: attributes}, this.responseHandler(callback));\n  }\n\n  update(id, attributes, callback) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/merchant_accounts/${id}/update_via_api`, {merchantAccount: attributes}, this.responseHandler(callback));\n  }\n\n  find(id, callback) {\n    if (id.trim() === '') {\n      return callback(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/merchant_accounts/${id}`, function (err, response) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, new MerchantAccount(response.merchantAccount));\n    });\n  }\n\n  responseHandler(callback) {\n    return this.createResponseHandler('merchantAccount', MerchantAccount, callback);\n  }\n\n  all(callback) {\n    let response = new PaginatedResponse(this.fetchMerchantAccounts.bind(this));\n\n    if (callback != null) {\n      return response.all(callback);\n    }\n\n    response.ready();\n    return response.stream;\n  }\n\n  fetchMerchantAccounts(pageNumber, callback) {\n    return this.gateway.http.get(this.config.baseMerchantPath() + '/merchant_accounts?page=' + pageNumber, function (err, response) {\n      let body, merchantAccounts, pageSize, ref, totalItems;\n\n      if (err) {\n        return callback(err);\n      }\n\n      body = response.merchantAccounts;\n      ref = response.merchantAccounts;\n      totalItems = ref.totalItems;\n      pageSize = ref.pageSize;\n      merchantAccounts = body.merchantAccount;\n      if (!_.isArray(merchantAccounts)) {\n        merchantAccounts = [merchantAccounts];\n      }\n      return callback(null, totalItems, pageSize, merchantAccounts);\n    });\n  }\n\n  createForCurrency(attributes, callback) {\n    return this.gateway.http.post(this.config.baseMerchantPath() + '/merchant_accounts/create_for_currency', {\n      merchantAccount: attributes\n    }, this.createForCurrencyResponseHandler(callback));\n  }\n\n  createForCurrencyResponseHandler(callback) {\n    return this.createResponseHandler(null, null, function (err, response) {\n      if (!err && response.success) {\n        response.merchantAccount = new MerchantAccount(response.response.merchantAccount);\n        delete response.response;\n      }\n      return callback(err, response);\n    });\n  }\n}\n\nmodule.exports = {MerchantAccountGateway: MerchantAccountGateway};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/merchant_account.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nclass MerchantAccount extends AttributeSetter {\n  static initClass() {\n    this.Status = {\n      Pending: 'pending',\n      Active: 'active',\n      Suspended: 'suspended'\n    };\n\n    this.FundingDestination = {\n      Bank: 'bank',\n      Email: 'email',\n      MobilePhone: 'mobile_phone'\n    };\n  }\n\n  constructor(attributes) {\n    super(attributes);\n    if (attributes.masterMerchantAccount) {\n      this.masterMerchantAccount = new MerchantAccount(attributes.masterMerchantAccount);\n    }\n  }\n}\nMerchantAccount.initClass();\n\nmodule.exports = {MerchantAccount: MerchantAccount};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/paginated_response.js":"'use strict';\n\nlet PaginatedResponseStream = require('./paginated_response_stream').PaginatedResponseStream;\n\nclass PaginatedResponse {\n  constructor(pagingFunction) {\n    this.pagingFunction = pagingFunction;\n    this.stream = new PaginatedResponseStream(this);\n  }\n\n  all(callback) {\n    var results = [];\n\n    this.stream.on('data', function (data) {\n      return results.push(data);\n    });\n    this.stream.on('end', function () {\n      return callback(null, results);\n    });\n    this.stream.on('error', function (err) {\n      return callback(err);\n    });\n    return this.stream.ready();\n  }\n\n  ready() {\n    return this.stream.ready();\n  }\n}\n\nmodule.exports = {PaginatedResponse: PaginatedResponse};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/paginated_response_stream.js":"'use strict';\n\nlet Readable = require('stream').Readable || require('readable-stream').Readable;\n\nclass PaginatedResponseStream extends Readable {\n  constructor(paginatedResponse) {\n    super({objectMode: true});\n\n    this.paginatedResponse = paginatedResponse;\n    this.pageSize = 0;\n    this.currentPage = 0;\n    this.index = 0;\n    this.totalItems = 0;\n    this.items = [];\n  }\n\n  nextItem() {\n    if (this.currentPage === 0 || this.index % this.pageSize === 0 && this.index < this.totalItems) {\n      this.currentPage++;\n      this.paginatedResponse.pagingFunction(this.currentPage, (err, totalItems, pageSize, items) => {\n        if (err) {\n          this.emit('error', err);\n          return;\n        }\n        this.totalItems = totalItems;\n        this.pageSize = pageSize;\n        this.items = items;\n        this.index++;\n        this.push(this.items.shift());\n      });\n    } else if (this.index >= this.totalItems) {\n      this.push(null);\n    } else {\n      this.index++;\n      this.push(this.items.shift());\n    }\n  }\n\n  ready() {\n    this.readyToStart = true;\n    this.emit('ready');\n  }\n\n  _read() {\n    if (this.readyToStart) {\n      this.nextItem();\n    } else {\n      this.on('ready', () => this.nextItem());\n    }\n  }\n}\n\nmodule.exports = {PaginatedResponseStream: PaginatedResponseStream};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/merchant_gateway.js":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet Merchant = require('./merchant').Merchant;\nlet OAuthCredentials = require('./oauth_credentials').OAuthCredentials;\n\nclass MerchantGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  create(attributes, callback) {\n    return this.gateway.http.post('/merchants/create_via_api', {merchant: attributes}, this.responseHandler(callback));\n  }\n\n  responseHandler(callback) {\n    return this.createResponseHandler(null, null, function (err, response) {\n      if (!err && response.success) {\n        response.merchant = new Merchant(response.response.merchant);\n        response.credentials = new OAuthCredentials(response.response.credentials);\n        delete response.response;\n      }\n      return callback(err, response);\n    });\n  }\n}\n\nmodule.exports = {MerchantGateway: MerchantGateway};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/merchant.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\nlet MerchantAccount = require('./merchant_account').MerchantAccount;\n\nclass Merchant extends AttributeSetter {\n  constructor(attributes) {\n    super(attributes);\n\n    if (attributes.merchantAccounts) {\n      this.merchantAccounts = attributes.merchantAccounts.map((merchantAccountAttributes) => new MerchantAccount(merchantAccountAttributes));\n    }\n  }\n}\n\nmodule.exports = {Merchant: Merchant};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/oauth_credentials.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nclass OAuthCredentials extends AttributeSetter {\n  constructor(attributes) {\n    super(attributes);\n  }\n}\n\nmodule.exports = {OAuthCredentials: OAuthCredentials};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/oauth_gateway.js":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet OAuthCredentials = require('./oauth_credentials').OAuthCredentials;\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\nlet Util = require('./util').Util;\nlet Digest = require('./digest').Digest;\n\nclass OAuthGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  createTokenFromCode(attributes, callback) {\n    attributes.grantType = 'authorization_code';\n    return this.gateway.http.post('/oauth/access_tokens', attributes, this.responseHandler(callback));\n  }\n\n  createTokenFromRefreshToken(attributes, callback) {\n    attributes.grantType = 'refresh_token';\n    return this.gateway.http.post('/oauth/access_tokens', attributes, this.responseHandler(callback));\n  }\n\n  revokeAccessToken(accessToken, callback) {\n    return this.gateway.http.post('/oauth/revoke_access_token', {token: accessToken}, this.createResponseHandler('result', AttributeSetter, callback));\n  }\n\n  responseHandler(callback) {\n    return this.createResponseHandler('credentials', OAuthCredentials, callback);\n  }\n\n  connectUrl(params) {\n    params.clientId = this.config.clientId;\n    let url = this.config.baseUrl() + '/oauth/connect?' + this.buildQuery(params);\n    let signature = Digest.Sha256hexdigest(this.config.clientSecret, url);\n\n    return url + `&signature=${signature}&algorithm=SHA256`;\n  }\n\n  buildQuery(params) {\n    params = Util.convertObjectKeysToUnderscores(params);\n\n    let paramsArray = this.buildSubQuery('user', params.user);\n\n    paramsArray.push.apply(paramsArray, this.buildSubQuery('business', params.business));\n    paramsArray.push.apply(paramsArray, this.buildSubArrayQuery('payment_methods', params.payment_methods));\n    delete params.user;\n    delete params.business;\n    delete params.payment_methods;\n\n    paramsArray.push.apply(paramsArray, (() => {\n      let result = [];\n\n      for (let key in params) {\n        if (!params.hasOwnProperty(key)) {\n          continue;\n        }\n        let val = params[key];\n\n        result.push([key, val]);\n      }\n      return result;\n    })());\n\n    let queryStringParts = paramsArray.map((paramParts) => {\n      let key = paramParts[0];\n      let value = paramParts[1];\n\n      return `${this._encodeValue(key)}=${this._encodeValue(value)}`;\n    });\n\n    return queryStringParts.join('&');\n  }\n\n  buildSubQuery(key, subParams) {\n    let arr = [];\n\n    for (let subKey in subParams) {\n      if (!subParams.hasOwnProperty(subKey)) {\n        continue;\n      }\n      let value = subParams[subKey];\n\n      arr.push([`${key}[${subKey}]`, value]);\n    }\n\n    return arr;\n  }\n\n  _encodeValue(value) {\n    return encodeURIComponent(value)\n      .replace(/[!'()]/g, escape)\n      .replace(/\\*/g, '%2A');\n  }\n\n  buildSubArrayQuery(key, values) {\n    return (values || []).map(value => [`${key}[]`, value]);\n  }\n}\n\nmodule.exports = {OAuthGateway: OAuthGateway};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/digest.js":"'use strict';\n\nlet crypto = require('crypto');\nlet _ = require('underscore');\n\nclass Digest {\n  static Sha1hexdigest(privateKey, string) {\n    return new Digest().hmacSha1(privateKey, string);\n  }\n\n  static Sha256hexdigest(privateKey, string) {\n    return new Digest().hmacSha256(privateKey, string);\n  }\n\n  static secureCompare(left, right) {\n    return new Digest().secureCompare(left, right);\n  }\n\n  hmacSha256(key, data) {\n    let hmac = crypto.createHmac('sha256', this.sha256(key));\n\n    hmac.update(data, 'binary');\n    return hmac.digest('hex');\n  }\n\n  hmacSha1(key, data) {\n    let hmac = crypto.createHmac('sha1', this.sha1(key));\n\n    hmac.update(data, 'binary');\n    return hmac.digest('hex');\n  }\n\n  secureCompare(left, right) {\n    if (left == null || right == null) { return false; }\n\n    let leftBytes = this.unpack(left);\n    let rightBytes = this.unpack(right);\n\n    let result = 0;\n\n    for (let bytePair of _.zip(leftBytes, rightBytes)) {\n      let leftByte = bytePair[0];\n      let rightByte = bytePair[1];\n\n      result |= leftByte ^ rightByte;\n    }\n\n    return result === 0;\n  }\n\n  sha1(data) {\n    let hash = crypto.createHash('sha1');\n\n    hash.update(data, 'binary');\n    return hash.digest();\n  }\n\n  sha256(data) {\n    let hash = crypto.createHash('sha256');\n\n    hash.update(data, 'binary');\n    return hash.digest();\n  }\n\n  unpack(string) {\n    let bytes = [];\n\n    for (let index = 0; index < string.length; index++) {\n      bytes.push(string.charCodeAt(index));\n    }\n    return bytes;\n  }\n}\n\nmodule.exports = {Digest: Digest};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/payment_method_gateway.js":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet ApplePayCard = require('./apple_pay_card').ApplePayCard;\nlet AndroidPayCard = require('./android_pay_card').AndroidPayCard;\nlet CreditCard = require('./credit_card').CreditCard;\nlet PayPalAccount = require('./paypal_account').PayPalAccount;\nlet CoinbaseAccount = require('./coinbase_account').CoinbaseAccount;\nlet UnknownPaymentMethod = require('./unknown_payment_method').UnknownPaymentMethod;\nlet PaymentMethodNonce = require('./payment_method_nonce').PaymentMethodNonce;\nlet UsBankAccount = require('./us_bank_account').UsBankAccount;\nlet VenmoAccount = require('./venmo_account').VenmoAccount;\nlet Util = require('./util').Util;\nlet exceptions = require('./exceptions');\nlet querystring = require('../../vendor/querystring.node.js.511d6a2/querystring');\n\nclass PaymentMethodGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  responseHandler(callback) {\n    let responseMapping = {\n      paypalAccount: PayPalAccount,\n      coinbaseAccount: CoinbaseAccount,\n      creditCard: CreditCard,\n      applePayCard: ApplePayCard,\n      androidPayCard: AndroidPayCard,\n      paymentMethodNonce: PaymentMethodNonce\n    };\n\n    return this.createResponseHandler(responseMapping, null, function (err, response) {\n      if (!err) {\n        let parsedResponse = PaymentMethodGateway.parsePaymentMethod(response);\n\n        if (parsedResponse instanceof PaymentMethodNonce) {\n          response.paymentMethodNonce = parsedResponse;\n        } else {\n          response.paymentMethod = parsedResponse;\n        }\n      }\n      return callback(err, response);\n    });\n  }\n\n  create(attributes, callback) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/payment_methods`, {paymentMethod: attributes}, this.responseHandler(callback));\n  }\n\n  find(token, callback) {\n    if (token.trim() === '') {\n      return callback(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/payment_methods/any/${token}`, function (err, response) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, PaymentMethodGateway.parsePaymentMethod(response));\n    });\n  }\n\n  update(token, attributes, callback) {\n    if (token.trim() === '') {\n      return callback(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/payment_methods/any/${token}`, {paymentMethod: attributes}, this.responseHandler(callback));\n  }\n\n  grant(token, attributes, callback) {\n    if (token.trim() === '') {\n      return callback(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    let grantOptions = {\n      sharedPaymentMethodToken: token\n    };\n\n    if (typeof attributes === 'boolean') {\n      attributes = {allow_vaulting: attributes}; // eslint-disable-line camelcase\n    }\n\n    grantOptions = Util.merge(grantOptions, attributes);\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/payment_methods/grant`, {\n      payment_method: grantOptions // eslint-disable-line camelcase\n    }, this.responseHandler(callback));\n  }\n\n  revoke(token, callback) {\n    if (token.trim() === '') {\n      return callback(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/payment_methods/revoke`, {\n      payment_method: { // eslint-disable-line camelcase\n        sharedPaymentMethodToken: token\n      }\n    }, this.responseHandler(callback));\n  }\n\n  static parsePaymentMethod(response) {\n    if (response.creditCard) {\n      return new CreditCard(response.creditCard);\n    } else if (response.paypalAccount) {\n      return new PayPalAccount(response.paypalAccount);\n    } else if (response.applePayCard) {\n      return new ApplePayCard(response.applePayCard);\n    } else if (response.androidPayCard) {\n      return new AndroidPayCard(response.androidPayCard);\n    } else if (response.coinbaseAccount) {\n      return new CoinbaseAccount(response.coinbaseAccount);\n    } else if (response.paymentMethodNonce) {\n      return new PaymentMethodNonce(response.paymentMethodNonce);\n    } else if (response.usBankAccount) {\n      return new UsBankAccount(response.usBankAccount);\n    } else if (response.venmoAccount) {\n      return new VenmoAccount(response.venmoAccount);\n    }\n\n    return new UnknownPaymentMethod(response);\n  }\n\n  delete(token, options, callback) {\n    let queryParam, invalidKeysError;\n\n    if (!callback) {\n      callback = options;\n      options = null;\n    }\n    invalidKeysError = Util.verifyKeys(this._deleteSignature(), options);\n\n    if (invalidKeysError) {\n      callback(invalidKeysError);\n      return;\n    }\n    queryParam = options != null ? '?' + querystring.stringify(Util.convertObjectKeysToUnderscores(options)) : '';\n    this.gateway.http.delete(this.config.baseMerchantPath() + '/payment_methods/any/' + token + queryParam, callback);\n  }\n\n  _deleteSignature() {\n    return {\n      valid: ['revokeAllGrants']\n    };\n  }\n}\n\nmodule.exports = {PaymentMethodGateway: PaymentMethodGateway};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/unknown_payment_method.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nclass UnknownPaymentMethod extends AttributeSetter {\n  constructor(attributes) {\n    let name = ((() => {\n      let result = [];\n\n      for (let keys of Object.keys(attributes)) {\n        result.push(keys);\n      }\n      return result;\n    })())[0];\n\n    if (typeof attributes[name] === 'object') {\n      attributes[name].imageUrl = 'https://assets.braintreegateway.com/payment_method_logo/unknown.png';\n    }\n    super(attributes[name]);\n  }\n}\n\nmodule.exports = {UnknownPaymentMethod: UnknownPaymentMethod};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/payment_method_nonce.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\nlet ThreeDSecureInfo = require('./three_d_secure_info').ThreeDSecureInfo;\n\nclass PaymentMethodNonce extends AttributeSetter {\n  constructor(attributes) {\n    super(attributes);\n    if (attributes.threeDSecureInfo) { this.threeDSecureInfo = new ThreeDSecureInfo(attributes.threeDSecureInfo); }\n  }\n}\n\nmodule.exports = {PaymentMethodNonce: PaymentMethodNonce};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/vendor/querystring.node.js.511d6a2/querystring.js":"/* eslint-disable */\n/*\n * querystring.js\n *  - node.js module providing \"parse\" and \"stringify\" methods\n *    to turn query strings into objects and to turn objects\n *    into query string, respectively\n *\n *  This module is basically a stub loader. It will load both\n *  sub-modules and put the respective exports under the same\n *  namespace.  You may choose to load the sub-modules\n *  individually if you only need the functionality of one.\n *\n * Chad Etzel\n *\n * Based on YUI \"querystring-parse.js\" module\n * http://github.com/isaacs/yui3/tree/master/src/querystring/js\n *\n * Copyright (c) 2009, Yahoo! Inc. and Chad Etzel\n * BSD License (see LICENSE.md for info)\n *\n */\n\n[\n  require(\"./querystring-parse\"),\n  require(\"./querystring-stringify\")\n].forEach(function (q) {\n  for (var i in q) if (q.hasOwnProperty(i)) exports[i] = q[i];\n});\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/vendor/querystring.node.js.511d6a2/querystring-parse.js":"/* eslint-disable */\n/*\n * querystring-parse.js\n *  - node.js module providing \"parse\" method to turn query strings into js objects\n *\n * Chad Etzel\n *\n * Based on YUI \"querystring-parse.js\" module\n * http://github.com/isaacs/yui3/tree/master/src/querystring/js\n *\n * Copyright (c) 2009, Yahoo! Inc. and Chad Etzel\n * BSD License (see LICENSE.md for info)\n */\n\n\nvar util = require(\"util\"),\n  braintree_util = require(\"./util\");\n\nexports.parse = querystring_parse;\n\n/**\n * <p>The querystring module adds support for serializing JavaScript objects into\n * query strings and parsing JavaScript objects from query strings format.</p>\n *\n * <p>The <code>querystring</code> module is a rollup of <code>querystring-parse</code> and\n * <code>querystring-stringify</code>.</p>\n *\n * <p>As their names suggest, <code>querystring-parse</code> adds support for parsing\n * Query String data (querystring.parse) and <code>querystring-stringify</code> for serializing\n * JavaScript data into Query Strings (querystring.stringify).  You may choose to\n * include either of the submodules individually if you don't need the\n * complementary functionality, or include the rollup for both.</p>\n *\n * @module querystring\n */\n\n/**\n * Provides parse method to accept Query Strings and return native\n * JavaScript objects.\n *\n * @module querystring\n * @submodule querystring-parse\n * @for querystring\n * @static\n */\nfunction querystring_parse (qs, sep, eq, unesc) {\n  return qs.split(sep || \"&\")\n    .map(pieceParser(eq || \"=\", unesc || unescape))\n    .reduce(mergeParams, {});\n};\n\nfunction unescape (s) {\n    return decodeURIComponent(s.replace(/\\+/g, ' '));\n};\n\n\n// Parse a key=val string.\n// These can get pretty hairy\n// example flow:\n// parse(foo[bar][][bla]=baz)\n// return parse(foo[bar][][bla],\"baz\")\n// return parse(foo[bar][], {bla : \"baz\"})\n// return parse(foo[bar], [{bla:\"baz\"}])\n// return parse(foo, {bar:[{bla:\"baz\"}]})\n// return {foo:{bar:[{bla:\"baz\"}]}}\nfunction pieceParser (eq, unesc) {\n  return function parsePiece (key, val) {\n    if (arguments.length !== 2) {\n      // key=val, called from the map/reduce\n      key = key.split(eq);\n      return parsePiece(\n        unesc(key.shift()),\n        unesc(key.join(eq))\n      );\n    }\n    key = key.replace(/^\\s+|\\s+$/g, '');\n    if (braintree_util.isString(val)) {\n      val = val.replace(/^\\s+|\\s+$/g, '');\n      // convert numerals to numbers\n      if (!isNaN(val)) {\n        var numVal = +val;\n        if (val === numVal.toString(10)) val = numVal;\n      }\n    }\n    var sliced = /(.*)\\[([^\\]]*)\\]$/.exec(key);\n    if (!sliced) {\n      var ret = {};\n      if (key) ret[key] = val;\n      return ret;\n    }\n    // [\"foo[][bar][][baz]\", \"foo[][bar][]\", \"baz\"]\n    var tail = sliced[2],\n      head = sliced[1];\n\n    // array: key[]=val\n    if (!tail) return parsePiece(head, [val]);\n\n    // obj: key[subkey]=val\n    var ret = {};\n    ret[tail] = val;\n    return parsePiece(head, ret);\n  };\n};\n\n// the reducer function that merges each query piece together into one set of params\nfunction mergeParams (params, addition) {\n\tvar ret;\n\n\tif (!params){\n\t\t// if it's uncontested, then just return the addition.\n\t\tret = addition;\n\t} else if (braintree_util.isArray(params)) {\n\t\t// if the existing value is an array, then concat it.\n\t\tret = params.concat(addition);\n\t} else if (!braintree_util.isObject(params) || !braintree_util.isObject(addition)) {\n\t\t// if the existing value is not an array, and either are not objects, arrayify it.\n\t\tret = [params].concat(addition);\n\t} else {\n\t\t// else merge them as objects, which is a little more complex\n\t\tret = mergeObjects(params, addition);\n\t}\n\treturn ret;\n};\n\n\n// Merge two *objects* together. If this is called, we've already ruled\n// out the simple cases, and need to do the for-in business.\nfunction mergeObjects (params, addition) {\n  for (var i in addition) if (i && addition.hasOwnProperty(i)) {\n    params[i] = mergeParams(params[i], addition[i]);\n  }\n  return params;\n};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/vendor/querystring.node.js.511d6a2/util.js":"/* eslint-disable */\n/*\n * util.js\n *  - utility helper functions for querystring module\n *\n * Chad Etzel\n *\n * Copyright (c) 2009, Yahoo! Inc. and Chad Etzel\n * BSD License (see LICENSE.md for info)\n *\n */\nexports.is = is;\nexports.isNull = isNull;\nexports.isUndefined = isUndefined;\nexports.isString = isString;\nexports.isNumber = isNumber;\nexports.isBoolean = isBoolean;\nexports.isArray = isArray;\nexports.isObject = isObject;\n\n\nfunction is (type, obj) {\n  return Object.prototype.toString.call(obj) === '[object '+type+']';\n}\n\nfunction isArray (obj) {\n  return is(\"Array\", obj);\n}\n\nfunction isObject (obj) {\n  return is(\"Object\", obj);\n}\n\nfunction isString (obj) {\n  return is(\"String\", obj);\n}\n\nfunction isNumber (obj) {\n  return is(\"Number\", obj);\n}\n\nfunction isBoolean (obj) {\n  return is(\"Boolean\", obj);\n}\n\nfunction isNull (obj) {\n  return typeof obj === \"object\" && !obj;\n}\n\nfunction isUndefined (obj) {\n  return typeof obj === \"undefined\";\n}\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/vendor/querystring.node.js.511d6a2/querystring-stringify.js":"/* eslint-disable */\n/*\n * querystring-stringify.js\n *   - node.js module providing 'stringify' method for converting objects to query strings.\n *\n * Chad Etzel\n *\n * Based on YUI \"querystring-stringify.js\" module\n * http://github.com/isaacs/yui3/tree/master/src/querystring/js\n *\n * Copyright (c) 2009, Yahoo! Inc. and Chad Etzel\n * BSD License (see LICENSE.md for info)\n *\n */\n\nvar util = require(\"./util\");\n\nexports.stringify = querystring_stringify;\n\nvar stack = [];\n/**\n * <p>Converts an arbitrary value to a Query String representation.</p>\n *\n * <p>Objects with cyclical references will trigger an exception.</p>\n *\n * @method stringify\n * @param obj {Variant} any arbitrary value to convert to query string\n * @param sep {String} (optional) Character that should join param k=v pairs together. Default: \"&\"\n * @param eq  {String} (optional) Character that should join keys to their values. Default: \"=\"\n * @param name {String} (optional) Name of the current key, for handling children recursively.\n * @param escape {Function} (optional) Function for escaping. Default: encodeURIComponent\n */\nfunction querystring_stringify (obj, sep, eq, name, escape) {\n  sep = sep || \"&\";\n  eq = eq || \"=\";\n  escape = escape || encodeURIComponent;\n\n  if (util.isNull(obj) || util.isUndefined(obj) || typeof(obj) === 'function') {\n    return name ? escape(name) + eq : '';\n  }\n\n  if (util.isBoolean(obj)) obj = +obj;\n  if (util.isNumber(obj) || util.isString(obj)) {\n    return escape(name) + eq + escape(obj);\n  }\n  if (util.isArray(obj)) {\n    var s = [];\n    name = name+'[]';\n    for (var i = 0, l = obj.length; i < l; i ++) {\n      s.push( querystring_stringify(obj[i], sep, eq, name, escape) );\n    }\n    return s.join(sep);\n  }\n\n  // Check for cyclical references in nested objects\n  for (var i = stack.length - 1; i >= 0; --i) if (stack[i] === obj) {\n    throw new Error(\"querystring_stringify. Cyclical reference\");\n  }\n\n  stack.push(obj);\n\n  var s = [];\n  var begin = name ? name + '[' : '';\n  var end = name ? ']' : '';\n  for (var i in obj) if (obj.hasOwnProperty(i)) {\n    var n = begin + i + end;\n    s.push(querystring_stringify(obj[i], sep, eq, n, escape));\n  }\n\n  stack.pop();\n\n  s = s.join(sep);\n  if (!s && name) return name + \"=\";\n  return s;\n};\n\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/payment_method_nonce_gateway.js":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet PaymentMethodNonce = require('./payment_method_nonce').PaymentMethodNonce;\n\nclass PaymentMethodNonceGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  responseHandler(callback) {\n    return this.createResponseHandler('payment_method_nonce', PaymentMethodNonce, function (err, response) {\n      if (!err) {\n        response.paymentMethodNonce = new PaymentMethodNonce(response.paymentMethodNonce);\n      }\n      return callback(err, response);\n    });\n  }\n\n  create(paymentMethodToken, callback) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/payment_methods/${paymentMethodToken}/nonces`, {}, this.responseHandler(callback));\n  }\n\n  find(paymentMethodNonce, callback) {\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/payment_method_nonces/${paymentMethodNonce}`, function (err, response) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, new PaymentMethodNonce(response.paymentMethodNonce));\n    });\n  }\n}\n\nmodule.exports = {PaymentMethodNonceGateway: PaymentMethodNonceGateway};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/paypal_account_gateway.js":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet PayPalAccount = require('./paypal_account').PayPalAccount;\nlet exceptions = require('./exceptions');\n\nclass PayPalAccountGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  find(token, callback) {\n    if (token.trim() === '') {\n      return callback(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/payment_methods/paypal_account/${token}`, function (err, response) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, new PayPalAccount(response.paypalAccount));\n    });\n  }\n\n  update(token, attributes, callback) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/payment_methods/paypal_account/${token}`, {paypalAccount: attributes}, this.responseHandler(callback));\n  }\n\n  delete(token, callback) {\n    return this.gateway.http.delete(`${this.config.baseMerchantPath()}/payment_methods/paypal_account/${token}`, callback);\n  }\n\n  responseHandler(callback) {\n    return this.createResponseHandler('paypalAccount', PayPalAccount, callback);\n  }\n}\n\nmodule.exports = {PayPalAccountGateway: PayPalAccountGateway};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/plan_gateway.js":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet Plan = require('./plan').Plan;\n\nclass PlanGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  all(callback) {\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/plans`, this.createResponseHandler('plan', Plan, callback));\n  }\n}\n\nmodule.exports = {PlanGateway: PlanGateway};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/plan.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nclass Plan extends AttributeSetter {}\n\nmodule.exports = {Plan: Plan};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/settlement_batch_summary_gateway.js":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet Util = require('./util').Util;\nlet SettlementBatchSummary = require('./settlement_batch_summary').SettlementBatchSummary;\n\nclass SettlementBatchSummaryGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  generate(criteria, callback) {\n    return this.gateway.http.post(\n      `${this.config.baseMerchantPath()}/settlement_batch_summary`,\n      {settlementBatchSummary: criteria},\n      this.responseHandler(criteria, callback)\n    );\n  }\n\n  responseHandler(criteria, callback) {\n    return this.createResponseHandler('settlementBatchSummary', SettlementBatchSummary, (err, response) => {\n      return callback(null, this.underscoreCustomField(criteria, response));\n    }\n    );\n  }\n\n  underscoreCustomField(criteria, response) {\n    if (response.success && 'groupByCustomField' in criteria) {\n      let camelCustomField = Util.toCamelCase(criteria.groupByCustomField);\n\n      for (let record of response.settlementBatchSummary.records) {\n        record[criteria.groupByCustomField] = record[camelCustomField];\n        record[camelCustomField] = null;\n      }\n    }\n\n    return response;\n  }\n}\n\nmodule.exports = {SettlementBatchSummaryGateway: SettlementBatchSummaryGateway};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/settlement_batch_summary.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nclass SettlementBatchSummary extends AttributeSetter {}\n\nmodule.exports = {SettlementBatchSummary: SettlementBatchSummary};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/subscription_gateway.js":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet Subscription = require('./subscription').Subscription;\nlet SubscriptionSearch = require('./subscription_search').SubscriptionSearch;\nlet TransactionGateway = require('./transaction_gateway').TransactionGateway;\nlet exceptions = require('./exceptions');\n\nclass SubscriptionGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  create(attributes, callback) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/subscriptions`, {subscription: attributes}, this.responseHandler(callback));\n  }\n\n  cancel(subscriptionId, callback) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/subscriptions/${subscriptionId}/cancel`, null, this.responseHandler(callback));\n  }\n\n  find(subscriptionId, callback) {\n    if (subscriptionId.trim() === '') {\n      return callback(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/subscriptions/${subscriptionId}`, function (err, response) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, new Subscription(response.subscription));\n    });\n  }\n\n  responseHandler(callback) {\n    return this.createResponseHandler('subscription', Subscription, callback);\n  }\n\n  retryCharge(subscriptionId, amount, callback) {\n    if (!callback) {\n      callback = amount;\n      amount = undefined; // eslint-disable-line no-undefined\n    }\n\n    return new TransactionGateway(this.gateway).sale({\n      amount: amount,\n      subscriptionId\n    }, callback);\n  }\n\n  search(fn, callback) {\n    let search = new SubscriptionSearch();\n\n    fn(search);\n    return this.createSearchResponse(`${this.config.baseMerchantPath()}/subscriptions/advanced_search_ids`, search, this.pagingFunctionGenerator(search), callback);\n  }\n\n  update(subscriptionId, attributes, callback) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/subscriptions/${subscriptionId}`, {subscription: attributes}, this.responseHandler(callback));\n  }\n\n  pagingFunctionGenerator(search) {\n    return super.pagingFunctionGenerator(search, 'subscriptions', Subscription, 'subscriptions', response => response.subscriptions.subscription);\n  }\n}\n\nmodule.exports = {SubscriptionGateway: SubscriptionGateway};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/subscription.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\nlet Transaction = require('./transaction').Transaction;\n\nclass Subscription extends AttributeSetter {\n  static initClass() {\n    this.Source = {\n      Api: 'api',\n      ControlPanel: 'control_panel',\n      Recurring: 'recurring'\n    };\n\n    this.Status = {\n      Active: 'Active',\n      Canceled: 'Canceled',\n      Expired: 'Expired',\n      PastDue: 'Past Due',\n      Pending: 'Pending',\n      All() {\n        let all = [];\n\n        for (let key in this) {\n          if (!this.hasOwnProperty(key)) {\n            continue;\n          }\n          let value = this[key];\n\n          if (key !== 'All') { all.push(value); }\n        }\n        return all;\n      }\n    };\n  }\n\n  constructor(attributes) {\n    super(attributes);\n    this.transactions = attributes.transactions.map((transactionAttributes) => new Transaction(transactionAttributes));\n  }\n}\nSubscription.initClass();\n\nmodule.exports = {Subscription: Subscription};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/subscription_search.js":"'use strict';\n\nlet AdvancedSearch = require('./advanced_search').AdvancedSearch;\nlet Subscription = require('./subscription').Subscription;\n\nclass SubscriptionSearch extends AdvancedSearch {\n  static initClass() {\n    this.multipleValueField('inTrialPeriod');\n    this.multipleValueField('ids');\n    this.textFields('id', 'transactionId');\n    this.multipleValueOrTextField('planId');\n    this.multipleValueField('status', {allows: Subscription.Status.All()}); // eslint-disable-line new-cap\n    this.multipleValueField('merchantAccountId');\n    this.rangeFields('price', 'daysPastDue', 'billingCyclesRemaining', 'nextBillingDate', 'createdAt');\n  }\n}\nSubscriptionSearch.initClass();\n\nmodule.exports = {SubscriptionSearch: SubscriptionSearch};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/transaction_gateway.js":"'use strict';\n\nlet AddressGateway = require('./address_gateway').AddressGateway;\nlet Gateway = require('./gateway').Gateway;\nlet Transaction = require('./transaction').Transaction;\nlet TransactionSearch = require('./transaction_search').TransactionSearch;\nlet isFunction = require('underscore').isFunction;\nlet Util = require('./util').Util;\nlet exceptions = require('./exceptions');\n\nclass TransactionGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  cancelRelease(transactionId, callback) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/transactions/${transactionId}/cancel_release`,\n      {},\n      this.responseHandler(callback)\n    );\n  }\n\n  cloneTransaction(transactionId, attributes, callback) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/transactions/${transactionId}/clone`, {transactionClone: attributes}, this.responseHandler(callback));\n  }\n\n  create(attributes, callback) {\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/transactions`, {transaction: attributes}, this.responseHandler(callback));\n  }\n\n  credit(attributes, callback) {\n    attributes.type = 'credit';\n    return this.create(attributes, callback);\n  }\n\n  find(transactionId, callback) {\n    if (transactionId.trim() === '') {\n      return callback(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/transactions/${transactionId}`, function (err, response) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, new Transaction(response.transaction));\n    });\n  }\n\n  holdInEscrow(transactionId, callback) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/transactions/${transactionId}/hold_in_escrow`,\n      {},\n      this.responseHandler(callback)\n    );\n  }\n\n  refund(transactionId, options, callback) {\n    if (!callback) {\n      callback = options;\n      options = {};\n    } else if (typeof options !== 'object') {\n      options = {amount: options};\n    }\n\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/transactions/${transactionId}/refund`, {transaction: options}, this.responseHandler(callback));\n  }\n\n  responseHandler(callback) {\n    return this.createResponseHandler('transaction', Transaction, callback);\n  }\n\n  sale(attributes, callback) {\n    let invalidKeysError;\n\n    attributes.type = 'sale';\n    invalidKeysError = Util.verifyKeys(this._createSignature(), attributes);\n\n    if (invalidKeysError) {\n      callback(invalidKeysError, null);\n      return;\n    }\n\n    this.create(attributes, callback);\n  }\n\n  search(fn, callback) {\n    let search = new TransactionSearch();\n\n    fn(search);\n    return this.createSearchResponse(`${this.config.baseMerchantPath()}/transactions/advanced_search_ids`, search, this.pagingFunctionGenerator(search), callback);\n  }\n\n  releaseFromEscrow(transactionId, callback) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/transactions/${transactionId}/release_from_escrow`,\n      {},\n      this.responseHandler(callback)\n    );\n  }\n\n  submitForSettlement(transactionId, amount, options, callback) {\n    let invalidKeysError;\n\n    if (isFunction(amount)) {\n      callback = amount;\n      amount = undefined; // eslint-disable-line no-undefined\n      options = {};\n    } else if (isFunction(options)) {\n      callback = options;\n      options = {};\n    }\n\n    invalidKeysError = Util.verifyKeys(this._submitForSettlementSignature(), options);\n\n    if (invalidKeysError) {\n      callback(invalidKeysError, null);\n      return;\n    }\n\n    this.gateway.http.put(`${this.config.baseMerchantPath()}/transactions/${transactionId}/submit_for_settlement`,\n      {transaction: {amount, orderId: options.orderId, descriptor: options.descriptor}},\n      this.responseHandler(callback)\n    );\n  }\n\n  updateDetails(transactionId, options, callback) {\n    let invalidKeysError = Util.verifyKeys(this._updateDetailsSignature(), options);\n\n    if (invalidKeysError) {\n      callback(invalidKeysError, null);\n      return;\n    }\n\n    this.gateway.http.put(`${this.config.baseMerchantPath()}/transactions/${transactionId}/update_details`,\n      {transaction: options},\n      this.responseHandler(callback)\n    );\n  }\n\n  submitForPartialSettlement(transactionId, amount, options, callback) {\n    let invalidKeysError;\n\n    if (isFunction(amount)) {\n      callback = amount;\n      amount = undefined; // eslint-disable-line no-undefined\n      options = {};\n    } else if (isFunction(options)) {\n      callback = options;\n      options = {};\n    }\n    invalidKeysError = Util.verifyKeys(this._submitForSettlementSignature(), options);\n\n    if (invalidKeysError) {\n      callback(invalidKeysError, null);\n      return;\n    }\n\n    this.gateway.http.post(`${this.config.baseMerchantPath()}/transactions/${transactionId}/submit_for_partial_settlement`,\n      {transaction: {amount, orderId: options.orderId, descriptor: options.descriptor}},\n      this.responseHandler(callback)\n    );\n  }\n\n  void(transactionId, callback) {\n    return this.gateway.http.put(`${this.config.baseMerchantPath()}/transactions/${transactionId}/void`, null, this.responseHandler(callback));\n  }\n\n  pagingFunctionGenerator(search) {\n    return super.pagingFunctionGenerator(search, 'transactions', Transaction, 'creditCardTransactions', response => response.creditCardTransactions.transaction);\n  }\n\n  _submitForSettlementSignature() {\n    return {\n      valid: ['orderId', 'descriptor[name]', 'descriptor[phone]', 'descriptor[url]']\n    };\n  }\n\n  _updateDetailsSignature() {\n    return {\n      valid: ['amount', 'orderId', 'descriptor[name]', 'descriptor[phone]', 'descriptor[url]']\n    };\n  }\n\n  _createSignature() {\n    let validKeys = [\n      'amount',\n      'customerId',\n      'merchantAccountId',\n      'orderId',\n      'channel',\n      'paymentMethodToken',\n      'purchaseOrderNumber',\n      'recurring',\n      'transactionSource',\n      'shippingAddressId',\n      'type',\n      'taxAmount',\n      'taxExempt',\n      'venmoSdkPaymentMethodCode',\n      'deviceSessionId',\n      'serviceFeeAmount',\n      'deviceData',\n      'fraudMerchantId',\n      'billingAddressId',\n      'paymentMethodNonce',\n      'paymentMethodToken',\n      'threeDSecureToken',\n      'sharedPaymentMethodToken',\n      'sharedBillingAddressId',\n      'sharedCustomerId',\n      'sharedShippingAddressId',\n      'riskData',\n      'riskData[customerBrowser]',\n      'riskData[customerIp]',\n      'riskData[customerBrowser]',\n      'creditCard',\n      'creditCard[token]',\n      'creditCard[cardholderName]',\n      'creditCard[cvv]',\n      'creditCard[expirationDate]',\n      'creditCard[expirationMonth]',\n      'creditCard[expirationYear]',\n      'creditCard[number]',\n      'customer',\n      'customer[id]',\n      'customer[company]',\n      'customer[email]',\n      'customer[fax]',\n      'customer[firstName]',\n      'customer[lastName]',\n      'customer[phone]',\n      'customer[website]',\n      'threeDSecurePassThru',\n      'threeDSecurePassThru[eciFlag]',\n      'threeDSecurePassThru[cavv]',\n      'threeDSecurePassThru[xid]',\n      'options',\n      'options[holdInEscrow]',\n      'options[storeInVault]',\n      'options[storeInVaultOnSuccess]',\n      'options[submitForSettlement]',\n      'options[addBillingAddressToPaymentMethod]',\n      'options[storeShippingAddressInVault]',\n      'options[venmoSdkSession]',\n      'options[payeeEmail]',\n      'options[skipAdvancedFraudChecking]',\n      'options[skipAvs]',\n      'options[skipCvv]',\n      'options[paypal]',\n      'options[paypal][customField]',\n      'options[paypal][payeeEmail]',\n      'options[paypal][description]',\n      'options[threeDSecure]',\n      'options[threeDSecure][required]',\n      'options[amexRewards]',\n      'options[amexRewards][requestId]',\n      'options[amexRewards][points]',\n      'options[amexRewards][currencyAmount]',\n      'options[amexRewards][currencyIsoCode]',\n      'descriptor',\n      'descriptor[name]',\n      'descriptor[phone]',\n      'descriptor[url]',\n      'paypalAccount',\n      'paypalAccount[email]',\n      'paypalAccount[token]',\n      'paypalAccount[paypalData]',\n      'paypalAccount[payeeEmail]',\n      'industry',\n      'industry[industryType]',\n      'industry[data]',\n      'industry[data][folioNumber]',\n      'industry[data][checkInDate]',\n      'industry[data][checkOutDate]',\n      'industry[data][travelPackage]',\n      'industry[data][lodgingCheckInDate]',\n      'industry[data][lodgingCheckOutDate]',\n      'industry[data][departureDate]',\n      'industry[data][lodgingName]',\n      'industry[data][roomRate]',\n      'applePayCard',\n      'applePayCard[number]',\n      'applePayCard[cardholderName]',\n      'applePayCard[cryptogram]',\n      'applePayCard[expirationMonth]',\n      'applePayCard[expirationYear]',\n      'androidPayCard',\n      'androidPayCard[number]',\n      'androidPayCard[cryptogram]',\n      'androidPayCard[googleTransactionId]',\n      'androidPayCard[expirationMonth]',\n      'androidPayCard[expirationYear]',\n      'androidPayCard[sourceCardType]',\n      'androidPayCard[sourceCardLastFour]',\n      'androidPayCard[eciIndicator]',\n      'subscriptionId'\n    ];\n\n    validKeys = validKeys.concat(new AddressGateway(this).sharedSignature('shipping'), new AddressGateway(this).sharedSignature('billing'));\n    return {\n      valid: validKeys,\n      ignore: ['customFields', 'options[paypal][supplementaryData]']\n    };\n  }\n}\n\nmodule.exports = {TransactionGateway: TransactionGateway};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/transaction_search.js":"'use strict';\n\nlet AdvancedSearch = require('./advanced_search').AdvancedSearch;\nlet Transaction = require('./transaction').Transaction;\nlet CreditCard = require('./credit_card').CreditCard;\n\nclass TransactionSearch extends AdvancedSearch {\n  static initClass() {\n    this.textFields(\n        'billingCompany',\n        'billingCountryName',\n        'billingExtendedAddress',\n        'billingFirstName',\n        'billingLastName',\n        'billingLocality',\n        'billingPostalCode',\n        'billingRegion',\n        'billingStreetAddress',\n        'creditCardCardholderName',\n        'currency',\n        'customerCompany',\n        'customerEmail',\n        'customerFax',\n        'customerFirstName',\n        'customerId',\n        'customerLastName',\n        'customerPhone',\n        'customerWebsite',\n        'id',\n        'orderId',\n        'paymentMethodToken',\n        'paypalPayerEmail',\n        'paypalPaymentId',\n        'paypalAuthorizationId',\n        'processorAuthorizationCode',\n        'settlementBatchId',\n        'shippingCompany',\n        'shippingCountryName',\n        'shippingExtendedAddress',\n        'shippingFirstName',\n        'shippingLastName',\n        'shippingLocality',\n        'shippingPostalCode',\n        'shippingRegion',\n        'shippingStreetAddress',\n        'creditCardUniqueIdentifier'\n      );\n\n    this.equalityFields('creditCardExpirationDate');\n    this.partialMatchFields('creditCardNumber');\n    this.multipleValueField('createdUsing', {allows: [\n      Transaction.CreatedUsing.FullInformation,\n      Transaction.CreatedUsing.Token\n    ]});\n    this.multipleValueField('creditCardCardType', {allows: CreditCard.CardType.All()}); // eslint-disable-line new-cap\n    this.multipleValueField('creditCardCustomerLocation', {allows: [\n      CreditCard.CustomerLocation.International,\n      CreditCard.CustomerLocation.US\n    ]});\n    this.multipleValueField('ids');\n    this.multipleValueField('user');\n    this.multipleValueField('paymentInstrumentType');\n    this.multipleValueField('merchantAccountId');\n    this.multipleValueField('status', {allows: Transaction.Status.All()}); // eslint-disable-line new-cap\n    this.multipleValueField('source');\n    this.multipleValueField('type', {allows: Transaction.Type.All()}); // eslint-disable-line new-cap\n    this.keyValueFields('refund');\n    this.rangeFields(\n        'amount',\n        'authorizationExpiredAt',\n        'authorizedAt',\n        'createdAt',\n        'disbursementDate',\n        'disputeDate',\n        'failedAt',\n        'gatewayRejectedAt',\n        'processorDeclinedAt',\n        'settledAt',\n        'submittedForSettlementAt',\n        'voidedAt'\n      );\n  }\n  }\nTransactionSearch.initClass();\n\nmodule.exports = {TransactionSearch: TransactionSearch};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/testing_gateway.js":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet Environment = require('./environment').Environment;\nlet exceptions = require('./exceptions');\n\nclass TestingGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  settle(transactionId, callback) {\n    return this.settlementOperationWithEnvironmentCheck(transactionId, 'settle', callback);\n  }\n\n  settlementPending(transactionId, callback) {\n    return this.settlementOperationWithEnvironmentCheck(transactionId, 'settlement_pending', callback);\n  }\n\n  settlementConfirm(transactionId, callback) {\n    return this.settlementOperationWithEnvironmentCheck(transactionId, 'settlement_confirm', callback);\n  }\n\n  settlementDecline(transactionId, callback) {\n    return this.settlementOperationWithEnvironmentCheck(transactionId, 'settlement_decline', callback);\n  }\n\n  settlementOperationWithEnvironmentCheck(transactionId, operation, callback) {\n    if (this.config.environment === Environment.Production) {\n      return callback(exceptions.TestOperationPerformedInProductionError('Test operation performed in production'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.put(\n      `${this.config.baseMerchantPath()}/transactions/${transactionId}/${operation}`,\n      null,\n      callback\n    );\n  }\n}\n\nmodule.exports = {TestingGateway: TestingGateway};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/transparent_redirect_gateway.js":"'use strict';\n\nlet Digest = require('./digest').Digest;\nlet Util = require('./util').Util;\nlet querystring = require('../../vendor/querystring.node.js.511d6a2/querystring');\nlet dateFormat = require('dateformat');\nlet CreditCardGateway = require('./credit_card_gateway').CreditCardGateway;\nlet CustomerGateway = require('./customer_gateway').CustomerGateway;\nlet TransactionGateway = require('./transaction_gateway').TransactionGateway;\nlet SignatureService = require('./signature_service').SignatureService;\nlet exceptions = require('./exceptions');\n\nlet KIND;\n\nclass TransparentRedirectGateway {\n  static initClass() {\n    KIND = {\n      CREATE_CUSTOMER: 'create_customer',\n      UPDATE_CUSTOMER: 'update_customer',\n      CREATE_CREDIT_CARD: 'create_payment_method',\n      UPDATE_CREDIT_CARD: 'update_payment_method',\n      CREATE_TRANSACTION: 'create_transaction'\n    };\n  }\n\n  constructor(gateway) {\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n    this.url = `${this.config.baseMerchantUrl()}/transparent_redirect_requests`;\n  }\n\n  generateTrData(inputData) {\n    let data = Util.convertObjectKeysToUnderscores(inputData);\n\n    data.api_version = this.gateway.config.apiVersion; // eslint-disable-line camelcase\n    data.time = dateFormat(new Date(), 'yyyymmddHHMMss', true);\n    data.public_key = this.gateway.config.publicKey; // eslint-disable-line camelcase\n    let dataSegment = querystring.stringify(data);\n\n    return new SignatureService(this.gateway.config.privateKey, Digest.Sha1hexdigest).sign(dataSegment);\n  }\n\n  createCreditCardData(data) {\n    data.kind = KIND.CREATE_CREDIT_CARD;\n    return this.generateTrData(data);\n  }\n\n  updateCreditCardData(data) {\n    data.kind = KIND.UPDATE_CREDIT_CARD;\n    return this.generateTrData(data);\n  }\n\n  createCustomerData(data) {\n    data.kind = KIND.CREATE_CUSTOMER;\n    return this.generateTrData(data);\n  }\n\n  updateCustomerData(data) {\n    data.kind = KIND.UPDATE_CUSTOMER;\n    return this.generateTrData(data);\n  }\n\n  transactionData(data) {\n    data.kind = KIND.CREATE_TRANSACTION;\n    return this.generateTrData(data);\n  }\n\n  validateQueryString(queryString) {\n    let matches = queryString.match(/^(.+)&hash=(.+?)$/);\n\n    return Digest.Sha1hexdigest(this.gateway.config.privateKey, matches[1]) === matches[2];\n  }\n\n  confirm(queryString, callback) {\n    let statusMatch = queryString.match(/http_status=(\\d+)/);\n\n    if (statusMatch && statusMatch[1]) {\n      let error = this.gateway.http.checkHttpStatus(statusMatch[1]);\n\n      if (error) { return callback(error, null); }\n    }\n    if (!this.validateQueryString(queryString)) {\n      return callback(exceptions.InvalidTransparentRedirectHashError('The transparent redirect hash is invalid'), null); // eslint-disable-line new-cap\n    }\n    let params = querystring.parse(queryString);\n    let confirmCallback = null;\n\n    switch (params.kind) { // eslint-disable-line default-case\n      case KIND.CREATE_CUSTOMER:\n      case KIND.UPDATE_CUSTOMER:\n        confirmCallback = new CustomerGateway(this.gateway).responseHandler(callback);\n        break;\n      case KIND.CREATE_CREDIT_CARD:\n      case KIND.UPDATE_CREDIT_CARD:\n        confirmCallback = new CreditCardGateway(this.gateway).responseHandler(callback);\n        break;\n      case KIND.CREATE_TRANSACTION:\n        confirmCallback = new TransactionGateway(this.gateway).responseHandler(callback);\n        break;\n    }\n    return this.gateway.http.post(`${this.config.baseMerchantPath()}/transparent_redirect_requests/` + params.id + '/confirm', null, confirmCallback);\n  }\n}\nTransparentRedirectGateway.initClass();\n\nmodule.exports = {TransparentRedirectGateway: TransparentRedirectGateway};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/signature_service.js":"'use strict';\n\nclass SignatureService {\n  constructor(key, hashFunction) {\n    this.key = key;\n    this.hashFunction = hashFunction;\n  }\n\n  sign(data) {\n    return `${this.hashFunction(this.key, data)}|${data}`;\n  }\n}\n\nmodule.exports = {SignatureService: SignatureService};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/us_bank_account_gateway.js":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet UsBankAccount = require('./us_bank_account').UsBankAccount;\nlet TransactionGateway = require('./transaction_gateway').TransactionGateway;\nlet exceptions = require('./exceptions');\n\nclass UsBankAccountGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  find(token, callback) {\n    if (token.trim() === '') {\n      return callback(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/payment_methods/us_bank_account/${token}`, function (err, response) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, new UsBankAccount(response.usBankAccount));\n    });\n  }\n\n  sale(token, transactionRequest, callback) {\n    transactionRequest.paymentMethodToken = token;\n    if (!transactionRequest.options) { transactionRequest.options = {}; }\n    transactionRequest.options.submitForSettlement = true;\n    return new TransactionGateway(this.gateway).sale(transactionRequest, callback);\n  }\n}\n\nmodule.exports = {UsBankAccountGateway: UsBankAccountGateway};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/webhook_notification_gateway.js":"'use strict';\n\nlet xml2js = require('xml2js');\nlet _ = require('underscore');\nlet Digest = require('./digest').Digest;\nlet Gateway = require('./gateway').Gateway;\nlet exceptions = require('./exceptions');\nlet Util = require('./util').Util;\nlet WebhookNotification = require('./webhook_notification').WebhookNotification;\n\nclass WebhookNotificationGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  parse(signature, payload, callback) {\n    if (payload.match(/[^A-Za-z0-9+=\\/\\n]/)) {\n      callback(exceptions.InvalidSignatureError('payload contains illegal characters'), null); // eslint-disable-line new-cap\n      return;\n    }\n    let err = this.validateSignature(signature, payload);\n\n    if (err) {\n      callback(err, null);\n      return;\n    }\n\n    let xmlPayload = new Buffer(payload, 'base64').toString('utf8');\n    let parser = new xml2js.Parser({\n      explicitRoot: true\n    });\n\n    parser.parseString(xmlPayload, (parseError, result) => {\n      if (parseError) {\n        callback(parseError);\n      } else {\n        let attributes = Util.convertNodeToObject(result);\n        let handler = this.createResponseHandler('notification', WebhookNotification, (responseHandlerErr, responseHandlerResponse) => {\n          callback(null, responseHandlerResponse.notification);\n        });\n\n        handler(null, attributes);\n      }\n    });\n  }\n\n  validateSignature(signatureString, payload) {\n    let signaturePairs = signatureString.split('&').filter((pair) => pair.indexOf('|') !== -1).map((pair) => pair.split('|'));\n    let signature = this.matchingSignature(signaturePairs);\n\n    if (!signature) {\n      return exceptions.InvalidSignatureError('no matching public key'); // eslint-disable-line new-cap\n    }\n\n    let self = this;\n    let matches = _.some([payload, payload + '\\n'], (data) => {\n      return Digest.secureCompare(signature, Digest.Sha1hexdigest(self.gateway.config.privateKey, data));\n    });\n\n    if (!matches) {\n      return exceptions.InvalidSignatureError('signature does not match payload - one has been modified'); // eslint-disable-line new-cap\n    }\n    return null;\n  }\n\n  verify(challenge, callback) {\n    if (!challenge.match(/^[a-f0-9]{20,32}$/)) {\n      if (callback != null) {\n        callback(exceptions.InvalidChallengeError('challenge contains non-hex characters'), null); // eslint-disable-line new-cap\n        return;\n      }\n\n      throw exceptions.InvalidChallengeError('challenge contains non-hex characters'); // eslint-disable-line new-cap\n    }\n    let digest = Digest.Sha1hexdigest(this.gateway.config.privateKey, challenge);\n\n    return `${this.gateway.config.publicKey}|${digest}`; // eslint-disable-line consistent-return\n  }\n\n  matchingSignature(signaturePairs) {\n    for (let keyPair of signaturePairs) {\n      let publicKey = keyPair[0];\n      let signature = keyPair[1];\n\n      if (this.gateway.config.publicKey === publicKey) {\n        return signature;\n      }\n    }\n    return null;\n  }\n}\n\nmodule.exports = {WebhookNotificationGateway: WebhookNotificationGateway};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/webhook_notification.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\nlet MerchantAccount = require('./merchant_account').MerchantAccount;\nlet Transaction = require('./transaction').Transaction;\nlet Disbursement = require('./disbursement').Disbursement;\nlet Dispute = require('./dispute').Dispute;\nlet PartnerMerchant = require('./partner_merchant').PartnerMerchant;\nlet Subscription = require('./subscription').Subscription;\nlet AccountUpdaterDailyReport = require('./account_updater_daily_report').AccountUpdaterDailyReport;\nlet ValidationErrorsCollection = require('./validation_errors_collection').ValidationErrorsCollection;\n\nclass WebhookNotification extends AttributeSetter {\n  static initClass() {\n    this.Kind = {\n      AccountUpdaterDailyReport: 'account_updater_daily_report',\n      Check: 'check',\n      Disbursement: 'disbursement',\n      DisbursementException: 'disbursement_exception',\n      DisputeOpened: 'dispute_opened',\n      DisputeLost: 'dispute_lost',\n      DisputeWon: 'dispute_won',\n      PartnerMerchantConnected: 'partner_merchant_connected',\n      PartnerMerchantDisconnected: 'partner_merchant_disconnected',\n      PartnerMerchantDeclined: 'partner_merchant_declined',\n      SubscriptionCanceled: 'subscription_canceled',\n      SubscriptionChargedSuccessfully: 'subscription_charged_successfully',\n      SubscriptionChargedUnsuccessfully: 'subscription_charged_unsuccessfully',\n      SubscriptionExpired: 'subscription_expired',\n      SubscriptionTrialEnded: 'subscription_trial_ended',\n      SubscriptionWentActive: 'subscription_went_active',\n      SubscriptionWentPastDue: 'subscription_went_past_due',\n      SubMerchantAccountApproved: 'sub_merchant_account_approved',\n      SubMerchantAccountDeclined: 'sub_merchant_account_declined',\n      TransactionDisbursed: 'transaction_disbursed',\n      TransactionSettled: 'transaction_settled',\n      TransactionSettlementDeclined: 'transaction_settlement_declined'\n    };\n  }\n\n  constructor(attributes) {\n    super(attributes);\n\n    let wrapperNode;\n\n    if (attributes.subject.apiErrorResponse != null) {\n      wrapperNode = attributes.subject.apiErrorResponse;\n    } else {\n      wrapperNode = attributes.subject;\n    }\n\n    if (wrapperNode.subscription != null) {\n      this.subscription = new Subscription(wrapperNode.subscription);\n    }\n\n    if (wrapperNode.merchantAccount != null) {\n      this.merchantAccount = new MerchantAccount(wrapperNode.merchantAccount);\n    }\n\n    if (wrapperNode.disbursement != null) {\n      this.disbursement = new Disbursement(wrapperNode.disbursement);\n    }\n\n    if (wrapperNode.transaction != null) {\n      this.transaction = new Transaction(wrapperNode.transaction);\n    }\n\n    if (wrapperNode.partnerMerchant != null) {\n      this.partnerMerchant = new PartnerMerchant(wrapperNode.partnerMerchant);\n    }\n\n    if (wrapperNode.dispute != null) {\n      this.dispute = new Dispute(wrapperNode.dispute);\n    }\n\n    if (wrapperNode.accountUpdaterDailyReport != null) {\n      this.accountUpdaterDailyReport = new AccountUpdaterDailyReport(wrapperNode.accountUpdaterDailyReport);\n    }\n\n    if (wrapperNode.errors != null) {\n      this.errors = new ValidationErrorsCollection(wrapperNode.errors);\n      this.message = wrapperNode.message;\n    }\n  }\n}\nWebhookNotification.initClass();\n\nmodule.exports = {WebhookNotification: WebhookNotification};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/disbursement.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nclass Disbursement extends AttributeSetter {\n  constructor(attributes) {\n    super(attributes);\n  }\n}\n\nmodule.exports = {Disbursement: Disbursement};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/partner_merchant.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nclass PartnerMerchant extends AttributeSetter {}\n\nmodule.exports = {PartnerMerchant: PartnerMerchant};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/account_updater_daily_report.js":"'use strict';\n\nlet AttributeSetter = require('./attribute_setter').AttributeSetter;\n\nclass AccountUpdaterDailyReport extends AttributeSetter {\n  constructor(attributes) {\n    super(attributes);\n  }\n}\n\nmodule.exports = {AccountUpdaterDailyReport: AccountUpdaterDailyReport};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/webhook_testing_gateway.js":"'use strict';\n\nlet Buffer = require('buffer').Buffer;\nlet Digest = require('./digest').Digest;\nlet Gateway = require('./gateway').Gateway;\nlet WebhookNotification = require('./webhook_notification').WebhookNotification;\nlet dateFormat = require('dateformat');\n\nclass WebhookTestingGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  sampleNotification(kind, id) {\n    let payload = new Buffer(this.sampleXml(kind, id)).toString('base64') + '\\n';\n    let signature = `${this.gateway.config.publicKey}|${Digest.Sha1hexdigest(this.gateway.config.privateKey, payload)}`;\n\n    return {\n      bt_signature: signature, // eslint-disable-line camelcase\n      bt_payload: payload // eslint-disable-line camelcase\n    };\n  }\n\n  sampleXml(kind, id) {\n    return `<notification>\n    <timestamp type=\"datetime\">${dateFormat(new Date(), dateFormat.masks.isoUtcDateTime, true)}</timestamp>\n    <kind>${kind}</kind>\n    <subject>${this.subjectXmlFor(kind, id)}</subject>\n</notification>`;\n  }\n\n  subjectXmlFor(kind, id) {\n    switch (kind) {\n      case WebhookNotification.Kind.AccountUpdaterDailyReport: return this.subjectXmlForAccountUpdaterDailyReport();\n      case WebhookNotification.Kind.Check: return this.subjectXmlForCheck();\n      case WebhookNotification.Kind.TransactionDisbursed: return this.subjectXmlForTransactionDisbursed(id);\n      case WebhookNotification.Kind.TransactionSettled: return this.subjectXmlForTransactionSettled(id);\n      case WebhookNotification.Kind.TransactionSettlementDeclined: return this.subjectXmlForTransactionSettlementDeclined(id);\n      case WebhookNotification.Kind.DisbursementException: return this.subjectXmlForDisbursementException(id);\n      case WebhookNotification.Kind.Disbursement: return this.subjectXmlForDisbursement(id);\n      case WebhookNotification.Kind.DisputeOpened: return this.subjectXmlForDisputeOpened(id);\n      case WebhookNotification.Kind.DisputeLost: return this.subjectXmlForDisputeLost(id);\n      case WebhookNotification.Kind.DisputeWon: return this.subjectXmlForDisputeWon(id);\n      case WebhookNotification.Kind.SubMerchantAccountApproved: return this.subjectXmlForSubMerchantAccountApproved(id);\n      case WebhookNotification.Kind.SubMerchantAccountDeclined: return this.subjectXmlForSubMerchantAccountDeclined(id);\n      case WebhookNotification.Kind.PartnerMerchantConnected: return this.subjectXmlForPartnerMerchantConnected();\n      case WebhookNotification.Kind.PartnerMerchantDisconnected: return this.subjectXmlForPartnerMerchantDisconnected();\n      case WebhookNotification.Kind.PartnerMerchantDeclined: return this.subjectXmlForPartnerMerchantDeclined();\n      case WebhookNotification.Kind.SubscriptionChargedSuccessfully: return this.subjectXmlForSubscriptionChargedSuccessfully(id);\n      default: return this.subjectXmlForSubscription(id);\n    }\n  }\n\n  subjectXmlForAccountUpdaterDailyReport() {\n    return `<account-updater-daily-report>\n  <report-date type=\"date\">2016-01-14</report-date>\n  <report-url>link-to-csv-report</report-url>\n</account-updater-daily-report>`;\n  }\n\n  subjectXmlForCheck() {\n    return '<check type=\"boolean\">true</check>';\n  }\n\n  subjectXmlForTransactionDisbursed(id) {\n    return `<transaction>\n  <id>${id}</id>\n  <amount>100</amount>\n  <disbursement-details>\n    <disbursement-date type=\"datetime\">2013-07-09T18:23:29Z</disbursement-date>\n  </disbursement-details>\n</transaction>`;\n  }\n\n  subjectXmlForTransactionSettled(id) {\n    return `<transaction>\n  <id>${id}</id>\n  <status>settled</status>\n  <type>sale</type>\n  <currency-iso-code>USD</currency-iso-code>\n  <amount>100</amount>\n  <merchant-account-id>ogaotkivejpfayqfeaimuktty</merchant-account-id>\n  <payment-instrument-type>us_bank_account</payment-instrument-type>\n  <us-bank-account>\n    <routing-number>123456789</routing-number>\n    <last-4>1234</last-4>\n    <account-type>checking</account-type>\n    <account-holder-name>Dan Schulman</account-holder-name>\n  </us-bank-account>\n</transaction>`;\n  }\n\n  subjectXmlForTransactionSettlementDeclined(id) {\n    return `<transaction>\n  <id>${id}</id>\n  <status>settlement_declined</status>\n  <type>sale</type>\n  <currency-iso-code>USD</currency-iso-code>\n  <amount>100</amount>\n  <merchant-account-id>ogaotkivejpfayqfeaimuktty</merchant-account-id>\n  <payment-instrument-type>us_bank_account</payment-instrument-type>\n  <us-bank-account>\n    <routing-number>123456789</routing-number>\n    <last-4>1234</last-4>\n    <account-type>checking</account-type>\n    <account-holder-name>Dan Schulman</account-holder-name>\n  </us-bank-account>\n</transaction>`;\n  }\n\n  subjectXmlForDisputeOpened(id) {\n    return `<dispute>\n  <amount>250.00</amount>\n  <currency-iso-code>USD</currency-iso-code>\n  <received-date type=\"date\">2014-03-01</received-date>\n  <reply-by-date type=\"date\">2014-03-21</reply-by-date>\n  <kind>chargeback</kind>\n  <status>open</status>\n  <reason>fraud</reason>\n  <id>${id}</id>\n  <transaction>\n    <id>${id}</id>\n    <amount>250.00</amount>\n  </transaction>\n  <date-opened type=\"date\">2014-03-28</date-opened>\n</dispute>`;\n  }\n\n  subjectXmlForDisputeLost(id) {\n    return `<dispute>\n  <amount>250.00</amount>\n  <currency-iso-code>USD</currency-iso-code>\n  <received-date type=\"date\">2014-03-01</received-date>\n  <reply-by-date type=\"date\">2014-03-21</reply-by-date>\n  <kind>chargeback</kind>\n  <status>lost</status>\n  <reason>fraud</reason>\n  <id>${id}</id>\n  <transaction>\n    <id>${id}</id>\n    <amount>250.00</amount>\n  </transaction>\n  <date-opened type=\"date\">2014-03-28</date-opened>\n</dispute>`;\n  }\n\n  subjectXmlForDisputeWon(id) {\n    return `<dispute>\n  <amount>250.00</amount>\n  <currency-iso-code>USD</currency-iso-code>\n  <received-date type=\"date\">2014-03-01</received-date>\n  <reply-by-date type=\"date\">2014-03-21</reply-by-date>\n  <kind>chargeback</kind>\n  <status>won</status>\n  <reason>fraud</reason>\n  <id>${id}</id>\n  <transaction>\n    <id>${id}</id>\n    <amount>250.00</amount>\n  </transaction>\n  <date-opened type=\"date\">2014-03-28</date-opened>\n  <date-won type=\"date\">2014-09-01</date-won>\n</dispute>`;\n  }\n\n  subjectXmlForDisbursementException(id) {\n    return `<disbursement>\n  <id>${id}</id>\n  <transaction-ids type=\"array\">\n    <item>afv56j</item>\n    <item>kj8hjk</item>\n  </transaction-ids>\n  <success type=\"boolean\">false</success>\n  <retry type=\"boolean\">false</retry>\n  <merchant-account>\n    <id>merchant_account_token</id>\n    <currency-iso-code>USD</currency-iso-code>\n    <sub-merchant-account type=\"boolean\">false</sub-merchant-account>\n    <status>active</status>\n  </merchant-account>\n  <amount>100.00</amount>\n  <disbursement-date type=\"date\">2014-02-10</disbursement-date>\n  <exception-message>bank_rejected</exception-message>\n  <follow-up-action>update_funding_information</follow-up-action>\n</disbursement>`;\n  }\n\n  subjectXmlForDisbursement(id) {\n    return `<disbursement>\n  <id>${id}</id>\n  <transaction-ids type=\"array\">\n    <item>afv56j</item>\n    <item>kj8hjk</item>\n  </transaction-ids>\n  <success type=\"boolean\">true</success>\n  <retry type=\"boolean\">false</retry>\n  <merchant-account>\n    <id>merchant_account_token</id>\n    <currency-iso-code>USD</currency-iso-code>\n    <sub-merchant-account type=\"boolean\">false</sub-merchant-account>\n    <status>active</status>\n  </merchant-account>\n  <amount>100.00</amount>\n  <disbursement-date type=\"date\">2014-02-10</disbursement-date>\n  <exception-message nil=\"true\"/>\n  <follow-up-action nil=\"true\"/>\n</disbursement>`;\n  }\n\n  subjectXmlForSubMerchantAccountApproved(id) {\n    return `<merchant_account>\n  <id>${id}</id>\n</merchant_account>`;\n  }\n\n  errorSampleXml() {\n    return `<error>\n  <code>82621</code>\n  <message>Credit score is too low</message>\n  <attribute type=\\\"symbol\\\">base</attribute>\n</error>`;\n  }\n\n  subjectXmlForSubMerchantAccountDeclined(id) {\n    return `<api-error-response>\n  <message>Credit score is too low</message>\n  <errors>\n    <merchant-account>\n      <errors type=\"array\">\n        ${this.errorSampleXml()}\n      </errors>\n    </merchant-account>\n  </errors>\n  ${this.merchantAccountSampleXml(id)}\n</api-error-response>`;\n  }\n\n  merchantAccountSampleXml(id) {\n    return `<merchant_account>\n  <id>${id}</id>\n  <master_merchant_account>\n    <id>master_ma_for_${id}</id>\n    <status>suspended</status>\n  </master_merchant_account>\n  <status>suspended</status>\n</merchant_account>`;\n  }\n\n  subjectXmlForSubscription(id) {\n    return `<subscription>\n    <id>${id}</id>\n    <transactions type=\"array\"></transactions>\n    <add_ons type=\"array\"></add_ons>\n    <discounts type=\"array\"></discounts>\n</subscription>`;\n  }\n\n  subjectXmlForSubscriptionChargedSuccessfully(id) {\n    return `<subscription>\n    <id>${id}</id>\n    <transactions type=\"array\">\n      <transaction>\n        <status>submitted_for_settlement</status>\n        <amount>49.99</amount>\n      </transaction>\n    </transactions>\n    <add_ons type=\"array\"></add_ons>\n    <discounts type=\"array\"></discounts>\n</subscription>`;\n  }\n\n  subjectXmlForPartnerMerchantConnected() {\n    return `<partner-merchant>\n  <merchant-public-id>public_id</merchant-public-id>\n  <public-key>public_key</public-key>\n  <private-key>private_key</private-key>\n  <partner-merchant-id>abc123</partner-merchant-id>\n  <client-side-encryption-key>cse_key</client-side-encryption-key>\n</partner-merchant>`;\n  }\n\n  subjectXmlForPartnerMerchantDisconnected() {\n    return `<partner-merchant>\n  <partner-merchant-id>abc123</partner-merchant-id>\n</partner-merchant>`;\n  }\n\n  subjectXmlForPartnerMerchantDeclined() {\n    return `<partner-merchant>\n  <partner-merchant-id>abc123</partner-merchant-id>\n</partner-merchant>`;\n  }\n}\n\nmodule.exports = {WebhookTestingGateway: WebhookTestingGateway};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/payment_instrument_types.js":"'use strict';\n\nlet PaymentInstrumentTypes = {\n  PayPalAccount: 'paypal_account',\n  EuropeBankAccount: 'europe_bank_account',\n  UsBankAccount: 'us_bank_account',\n  CreditCard: 'credit_card',\n  CoinbaseAccount: 'coinbase_account',\n  ApplePayCard: 'apple_pay_card',\n  AndroidPayCard: 'android_pay_card',\n  AmexExpressCheckoutCard: 'amex_express_checkout_card',\n  VenmoAccount: 'venmo_account'\n};\n\nmodule.exports = {PaymentInstrumentTypes: PaymentInstrumentTypes};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/validation_error_codes.js":"'use strict';\n\nclass ValidationErrorCodes {\n  static initClass() {\n    this.Address = {\n      CannotBeBlank: '81801',\n      CompanyIsInvalid: '91821',\n      CompanyIsTooLong: '81802',\n      CountryCodeAlpha2IsNotAccepted: '91814',\n      CountryCodeAlpha3IsNotAccepted: '91816',\n      CountryCodeNumericIsNotAccepted: '91817',\n      CountryNameIsNotAccepted: '91803',\n      ExtendedAddressIsInvalid: '91823',\n      ExtendedAddressIsTooLong: '81804',\n      FirstNameIsInvalid: '91819',\n      FirstNameIsTooLong: '81805',\n      InconsistentCountry: '91815',\n      IsInvalid: '91828',\n      LastNameIsInvalid: '91820',\n      LastNameIsTooLong: '81806',\n      LocalityIsInvalid: '91824',\n      LocalityIsTooLong: '81807',\n      PostalCodeInvalidCharacters: '81813',\n      PostalCodeIsInvalid: '91826',\n      PostalCodeIsRequired: '81808',\n      PostalCodeIsTooLong: '81809',\n      RegionIsInvalid: '91825',\n      RegionIsTooLong: '81810',\n      StateIsInvalidForSellerProtection: '81827',\n      StreetAddressIsInvalid: '91822',\n      StreetAddressIsRequired: '81811',\n      StreetAddressIsTooLong: '81812',\n      TooManyAddressesPerCustomer: '91818'\n    };\n\n    this.ApplePayCard = {\n      ApplePayCardsAreNotAccepted: '83501',\n      CustomerIdIsRequiredForVaulting: '83502',\n      TokenIsInUse: '93503',\n      PaymentMethodNonceConsumed: '93504',\n      PaymentMethodNonceUnknown: '93505',\n      PaymentMethodNonceLocked: '93506',\n      PaymentMethodNonceCardTypeIsNotAccepted: '83518',\n      CannotUpdateApplePayCardUsingPaymentMethodNonce: '93507',\n      NumberIsRequired: '93508',\n      ExpirationMonthIsRequired: '93509',\n      ExpirationYearIsRequired: '93510',\n      CryptogramIsRequired: '93511',\n      DecryptionFailed: '83512',\n      Disabled: '93513',\n      MerchantNotConfigured: '93514',\n      MerchantKeysAlreadyConfigured: '93515',\n      MerchantKeysNotConfigured: '93516',\n      CertificateInvalid: '93517',\n      CertificateMismatch: '93519',\n      InvalidToken: '83520',\n      PrivateKeyMismatch: '93521',\n      KeyMismatchStoringCertificate: '93522'\n    };\n\n    this.AuthorizationFingerprint = {\n      InvalidCreatedAt: '93204',\n      InvalidFormat: '93202',\n      InvalidPublicKey: '93205',\n      InvalidSignature: '93206',\n      MissingFingerprint: '93201',\n      OptionsNotAllowedWithoutCustomer: '93207',\n      SignatureRevoked: '93203'\n    };\n\n    this.ClientToken = {\n      CustomerDoesNotExist: '92804',\n      FailOnDuplicatePaymentMethodRequiresCustomerId: '92803',\n      MakeDefaultRequiresCustomerId: '92801',\n      ProxyMerchantDoesNotExist: '92805',\n      VerifyCardRequiresCustomerId: '92802',\n      MerchantAccountDoesNotExist: '92807',\n      UnsupportedVersion: '92806'\n    };\n\n    this.CreditCard = {\n      BillingAddressConflict: '91701',\n      BillingAddressFormatIsInvalid: '91744',\n      BillingAddressIdIsInvalid: '91702',\n      CannotUpdateCardUsingPaymentMethodNonce: '91735',\n      CardholderNameIsTooLong: '81723',\n      CreditCardTypeIsNotAccepted: '81703',\n      CreditCardTypeIsNotAcceptedBySubscriptionMerchantAccount: '81718',\n      CustomerIdIsInvalid: '91705',\n      CustomerIdIsRequired: '91704',\n      CvvIsInvalid: '81707',\n      CvvIsRequired: '81706',\n      CvvVerificationFailed: '81736',\n      DuplicateCardExists: '81724',\n      ExpirationDateConflict: '91708',\n      ExpirationDateIsInvalid: '81710',\n      ExpirationDateIsRequired: '81709',\n      ExpirationDateYearIsInvalid: '81711',\n      ExpirationMonthIsInvalid: '81712',\n      ExpirationYearIsInvalid: '81713',\n      InvalidParamsForCreditCardUpdate: '91745',\n      InvalidVenmoSDKPaymentMethodCode: '91727',\n      NumberHasInvalidLength: '81716',\n      NumberIsInvalid: '81715',\n      NumberIsProhibited: '81750',\n      NumberIsRequired: '81714',\n      NumberLengthIsInvalid: '81716',\n      NumberMustBeTestNumber: '81717',\n      PaymentMethodConflict: '81725',\n      PaymentMethodIsNotACreditCard: '91738',\n      PaymentMethodNonceCardTypeIsNotAccepted: '91734',\n      PaymentMethodNonceConsumed: '91731',\n      PaymentMethodNonceLocked: '91733',\n      PaymentMethodNonceUnknown: '91732',\n      PostalCodeVerificationFailed: '81737',\n      TokenFormatIsInvalid: '91718',\n      TokenInvalid: '91718',\n      TokenIsInUse: '91719',\n      TokenIsNotAllowed: '91721',\n      TokenIsRequired: '91722',\n      TokenIsTooLong: '91720',\n      VenmoSDKPaymentMethodCodeCardTypeIsNotAccepted: '91726',\n      VerificationNotSupportedOnThisMerchantAccount: '91730',\n      Options: {\n        UpdateExistingTokenIsInvalid: '91723',\n        UpdateExistingTokenNotAllowed: '91729',\n        VerificationAmountCannotBeNegative: '91739',\n        VerificationAmountFormatIsInvalid: '91740',\n        VerificationAmountIsTooLarge: '91752',\n        VerificationAmountNotSupportedByProcessor: '91741',\n        VerificationMerchantAccountIdIsInvalid: '91728',\n        VerificationMerchantAccountIsForbidden: '91743',\n        VerificationMerchantAccountIsSuspended: '91742',\n        VerificationMerchantAccountCannotBeSubMerchantAccount: '91755'\n      }\n    };\n\n    this.Customer = {\n      CompanyIsTooLong: '81601',\n      CustomFieldIsInvalid: '91602',\n      CustomFieldIsTooLong: '81603',\n      EmailFormatIsInvalid: '81604',\n      EmailIsRequired: '81606',\n      EmailIsTooLong: '81605',\n      FaxIsTooLong: '81607',\n      FirstNameIsTooLong: '81608',\n      IdIsInUse: '91609',\n      IdIsInvalid: '91610',\n      IdIsNotAllowed: '91611',\n      IdIsRequired: '91613',\n      IdIsTooLong: '91612',\n      LastNameIsTooLong: '81613',\n      PhoneIsTooLong: '81614',\n      VaultedPaymentInstrumentNonceBelongsToDifferentCustomer: '91617',\n      WebsiteFormatIsInvalid: '81616',\n      WebsiteIsTooLong: '81615'\n    };\n\n    this.Descriptor = {\n      InternationalNameFormatIsInvalid: '92204',\n      PhoneFormatIsInvalid: '92202',\n      DynamicDescriptorsDisabled: '92203',\n      NameFormatIsInvalid: '92201',\n      InternationalPhoneFormatIsInvalid: '92205',\n      UrlFormatIsInvalid: '92206'\n    };\n\n    this.Merchant = {\n      CountryCannotBeBlank: '83603',\n      CountryCodeAlpha2IsInvalid: '93607',\n      CountryCodeAlpha2IsNotAccepted: '93606',\n      CountryCodeAlpha3IsInvalid: '93605',\n      CountryCodeAlpha3IsNotAccepted: '93604',\n      CountryCodeNumericIsInvalid: '93609',\n      CountryCodeNumericIsNotAccepted: '93608',\n      CountryNameIsInvalid: '93611',\n      CountryNameIsNotAccepted: '93610',\n      CurrenciesAreInvalid: '93614',\n      EmailFormatIsInvalid: '93602',\n      EmailIsRequired: '83601',\n      InconsistentCountry: '93612',\n      PaymentMethodsAreInvalid: '93613',\n      PaymentMethodsAreNotAllowed: '93615',\n      MerchantAccountExistsForCurrency: '93616',\n      CurrencyIsRequired: '93617',\n      CurrencyIsInvalid: '93618',\n      NoMerchantAccounts: '93619',\n      MerchantAccountExistsForId: '93620',\n      MerchantAccountNotAuthOnboarded: '93621'\n    };\n\n    this.MerchantAccount = {\n      ApplicantDetails: {\n        AccountNumberIsInvalid: '82670',\n        AccountNumberIsRequired: '82614',\n        Address: {\n          LocalityIsRequired: '82618',\n          PostalCodeIsInvalid: '82630',\n          PostalCodeIsRequired: '82619',\n          RegionIsInvalid: '82664',\n          RegionIsRequired: '82620',\n          StreetAddressIsInvalid: '82629',\n          StreetAddressIsRequired: '82617'\n        },\n        CompanyNameIsInvalid: '82631',\n        CompanyNameIsRequiredWithTaxId: '82633',\n        DateOfBirthIsInvalid: '82663',\n        DateOfBirthIsRequired: '82612',\n        Declined: '82626',\n        DeclinedFailedKYC: '82623',\n        DeclinedMasterCardMatch: '82622',\n        DeclinedOFAC: '82621',\n        DeclinedSsnInvalid: '82624',\n        DeclinedSsnMatchesDeceased: '82625',\n        EmailAddressIsInvalid: '82616',\n        EmailAddressIsRequired: '82665',\n        FirstNameIsInvalid: '82627',\n        FirstNameIsRequired: '82609',\n        LastNameIsInvalid: '82628',\n        LastNameIsRequired: '82611',\n        PhoneIsInvalid: '82636',\n        RoutingNumberIsInvalid: '82635',\n        RoutingNumberIsRequired: '82613',\n        SsnIsInvalid: '82615',\n        TaxIdIsInvalid: '82632',\n        TaxIdIsRequiredWithCompanyName: '82634',\n        TaxIdMustBeBlank: '82673'\n      },\n      Individual: {\n        DateOfBirthIsInvalid: '82666',\n        DateOfBirthIsRequired: '82639',\n        EmailIsInvalid: '82643',\n        EmailIsRequired: '82667',\n        FirstNameIsInvalid: '82644',\n        FirstNameIsRequired: '82637',\n        LastNameIsInvalid: '82645',\n        LastNameIsRequired: '82638',\n        PhoneIsInvalid: '82656',\n        SsnIsInvalid: '82642',\n        Address: {\n          StreetAddressIsRequired: '82657',\n          LocalityIsRequired: '82658',\n          PostalCodeIsRequired: '82659',\n          RegionIsRequired: '82660',\n          StreetAddressIsInvalid: '82661',\n          PostalCodeIsInvalid: '82662',\n          RegionIsInvalid: '82668'\n        }\n      },\n      Business: {\n        DbaNameIsInvalid: '82646',\n        LegalNameIsInvalid: '82677',\n        LegalNameIsRequiredWithTaxId: '82669',\n        TaxIdIsInvalid: '82647',\n        TaxIdIsRequiredWithLegalName: '82648',\n        TaxIdMustBeBlank: '82672',\n        Address: {\n          StreetAddressIsInvalid: '82685',\n          PostalCodeIsInvalid: '82686',\n          RegionIsInvalid: '82684'\n        }\n      },\n      Funding: {\n        AccountNumberIsInvalid: '82671',\n        AccountNumberIsRequired: '82641',\n        DestinationIsInvalid: '82679',\n        DestinationIsRequired: '82678',\n        EmailIsInvalid: '82681',\n        EmailIsRequired: '82680',\n        MobilePhoneIsInvalid: '82683',\n        MobilePhoneIsRequired: '82682',\n        RoutingNumberIsInvalid: '82649',\n        RoutingNumberIsRequired: '82640'\n      },\n      CannotBeUpdated: '82674',\n      IdCannotBeUpdated: '82675',\n      IdFormatIsInvalid: '82603',\n      IdIsInUse: '82604',\n      IdIsNotAllowed: '82605',\n      IdIsTooLong: '82602',\n      MasterMerchantAccountIdCannotBeUpdated: '82676',\n      MasterMerchantAccountIdIsInvalid: '82607',\n      MasterMerchantAccountIdIsRequired: '82606',\n      MasterMerchantAccountMustBeActive: '82608',\n      TosAcceptedIsRequired: '82610'\n    };\n\n    this.OAuth = {\n      InvalidGrant: '93801',\n      InvalidCredentials: '93802',\n      InvalidScope: '93803',\n      InvalidRequest: '93804',\n      UnsupportedGrantType: '93805'\n    };\n\n    this.PaymentMethod = {\n      CannotForwardPaymentMethodType: '93106',\n      CustomerIdIsInvalid: '93105',\n      CustomerIdIsRequired: '93104',\n      NonceIsInvalid: '93102',\n      NonceIsRequired: '93103',\n      PaymentMethodParamsAreRequired: '93101',\n      PaymentMethodNonceConsumed: '93107',\n      PaymentMethodNonceUnknown: '93108',\n      PaymentMethodNonceLocked: '93109'\n    };\n\n    this.PayPalAccount = {\n      AuthExpired: '92911',\n      CannotHaveBothAccessTokenAndConsentCode: '82903',\n      CannotHaveFundingSourceWithoutAccessToken: '92912',\n      CannotUpdatePayPalAccountUsingPaymentMethodNonce: '92914',\n      CannotVaultOneTimeUsePayPalAccount: '82902',\n      ConsentCodeOrAccessTokenIsRequired: '82901',\n      CustomerIdIsRequiredForVaulting: '82905',\n      InvalidFundingSourceSelection: '92913',\n      InvalidParamsForPayPalAccountUpdate: '92915',\n      PayPalAccountsAreNotAccepted: '82904',\n      PayPalCommunicationError: '92910',\n      PaymentMethodNonceConsumed: '92907',\n      PaymentMethodNonceLocked: '92909',\n      PaymentMethodNonceUnknown: '92908',\n      TokenIsInUse: '92906'\n    };\n\n    this.SEPABankAccount = {\n      IBANIsRequired: '93001',\n      BICIsRequired: '93002',\n      AccountHolderNameIsRequired: '93003'\n    };\n\n    this.SEPAMandate = {\n      AccountHolderNameIsRequired: '83301',\n      BICIsRequired: '83302',\n      IBANIsRequired: '83303',\n      TypeIsRequired: '93304',\n      IBANInvalidCharacter: '83305',\n      BICInvalidCharacter: '83306',\n      BICLengthIsInvalid: '83307',\n      BICUnsupportedCountry: '83308',\n      IBANUnsupportedCountry: '83309',\n      IBANInvalidFormat: '83310',\n      BillingAddressConflict: '93311',\n      BillingAddressIdIsInvalid: '93312',\n      TypeIsInvalid: '93313'\n    };\n\n    this.SettlementBatchSummary = {\n      SettlementDateIsInvalid: '82302',\n      SettlementDateIsRequired: '82301',\n      CustomFieldIsInvalid: '82303'\n    };\n\n    this.Subscription = {\n      BillingDayOfMonthCannotBeUpdated: '91918',\n      BillingDayOfMonthIsInvalid: '91914',\n      BillingDayOfMonthMustBeNumeric: '91913',\n      CannotAddDuplicateAddonOrDiscount: '91911',\n      CannotEditCanceledSubscription: '81901',\n      CannotEditExpiredSubscription: '81910',\n      CannotEditPriceChangingFieldsOnPastDueSubscription: '91920',\n      FirstBillingDateCannotBeInThePast: '91916',\n      FirstBillingDateCannotBeUpdated: '91919',\n      FirstBillingDateIsInvalid: '91915',\n      IdIsInUse: '81902',\n      InconsistentNumberOfBillingCycles: '91908',\n      InconsistentStartDate: '91917',\n      InvalidRequestFormat: '91921',\n      MerchantAccountDoesNotSupportInstrumentType: '91930',\n      MerchantAccountIdIsInvalid: '91901',\n      MismatchCurrencyISOCode: '91923',\n      NumberOfBillingCyclesCannotBeBlank: '91912',\n      NumberOfBillingCyclesIsTooSmall: '91909',\n      NumberOfBillingCyclesMustBeGreaterThanZero: '91907',\n      NumberOfBillingCyclesMustBeNumeric: '91906',\n      PaymentMethodNonceCardTypeIsNotAccepted: '91924',\n      PaymentMethodNonceInstrumentTypeDoesNotSupportSubscriptions: '91929',\n      PaymentMethodNonceIsInvalid: '91925',\n      PaymentMethodNonceNotAssociatedWithCustomer: '91926',\n      PaymentMethodNonceUnvaultedCardIsNotAccepted: '91927',\n      PaymentMethodTokenCardTypeIsNotAccepted: '91902',\n      PaymentMethodTokenInstrumentTypeDoesNotSupportSubscriptions: '91928',\n      PaymentMethodTokenIsInvalid: '91903',\n      PaymentMethodTokenNotAssociatedWithCustomer: '91905',\n      PlanBillingFrequencyCannotBeUpdated: '91922',\n      PlanIdIsInvalid: '91904',\n      PriceCannotBeBlank: '81903',\n      PriceFormatIsInvalid: '81904',\n      PriceIsTooLarge: '81923',\n      StatusIsCanceled: '81905',\n      TokenFormatIsInvalid: '81906',\n      TrialDurationFormatIsInvalid: '81907',\n      TrialDurationIsRequired: '81908',\n      TrialDurationUnitIsInvalid: '81909',\n      Modification: {\n        AmountCannotBeBlank: '92003',\n        AmountIsInvalid: '92002',\n        AmountIsTooLarge: '92023',\n        CannotEditModificationsOnPastDueSubscription: '92022',\n        CannotUpdateAndRemove: '92015',\n        ExistingIdIsIncorrectKind: '92020',\n        ExistingIdIsInvalid: '92011',\n        ExistingIdIsRequired: '92012',\n        IdToRemoveIsIncorrectKind: '92021',\n        IdToRemoveIsInvalid: '92025',\n        IdToRemoveIsNotPresent: '92016',\n        InconsistentNumberOfBillingCycles: '92018',\n        InheritedFromIdIsInvalid: '92013',\n        InheritedFromIdIsRequired: '92014',\n        Missing: '92024',\n        NumberOfBillingCyclesCannotBeBlank: '92017',\n        NumberOfBillingCyclesIsInvalid: '92005',\n        NumberOfBillingCyclesMustBeGreaterThanZero: '92019',\n        QuantityCannotBeBlank: '92004',\n        QuantityIsInvalid: '92001',\n        QuantityMustBeGreaterThanZero: '92010'\n      }\n    };\n\n    this.Transaction = {\n      AmountCannotBeNegative: '81501',\n      AmountDoesNotMatch3DSecureAmount: '91585',\n      AmountFormatIsInvalid: '81503',\n      AmountIsRequired: '81502',\n      AmountIsTooLarge: '81528',\n      AmountMustBeGreaterThanZero: '81531',\n      BillingAddressConflict: '91530',\n      CannotBeVoided: '91504',\n      CannotCancelRelease: '91562',\n      CannotCloneCredit: '91543',\n      CannotCloneMarketplaceTransaction: '915137',\n      CannotCloneTransactionWithPayPalAccount: '91573',\n      CannotCloneTransactionWithVaultCreditCard: '91540',\n      CannotCloneUnsuccessfulTransaction: '91542',\n      CannotCloneVoiceAuthorizations: '91541',\n      CannotHoldInEscrow: '91560',\n      CannotPartiallyRefundEscrowedTransaction: '91563',\n      CannotRefundCredit: '91505',\n      CannotRefundSettlingTransaction: '91574',\n      CannotRefundUnlessSettled: '91506',\n      CannotRefundWithPendingMerchantAccount: '91559',\n      CannotRefundWithSuspendedMerchantAccount: '91538',\n      CannotReleaseFromEscrow: '91561',\n      CannotSimulateSettlement: '91575',\n      CannotSubmitForPartialSettlement: '915103',\n      CannotSubmitForSettlement: '91507',\n      CannotUpdateTransactionDetailsNotSubmittedForSettlement: '915129',\n      ChannelIsTooLong: '91550',\n      CreditCardIsRequired: '91508',\n      CustomFieldIsInvalid: '91526',\n      CustomFieldIsTooLong: '81527',\n      CustomerDefaultPaymentMethodCardTypeIsNotAccepted: '81509',\n      CustomerDoesNotHaveCreditCard: '91511',\n      CustomerIdIsInvalid: '91510',\n      HasAlreadyBeenRefunded: '91512',\n      MerchantAccountDoesNotMatch3DSecureMerchantAccount: '91584',\n      MerchantAccountDoesNotSupportMOTO: '91558',\n      MerchantAccountDoesNotSupportRefunds: '91547',\n      MerchantAccountIdIsInvalid: '91513',\n      MerchantAccountIsSuspended: '91514',\n      Options: {\n        PayPal: {\n          CustomFieldTooLong: '91580'\n        },\n        SubmitForSettlementIsRequiredForCloning: '91544',\n        SubmitForSettlementIsRequiredForPayPalUnilateral: '91582',\n        UseBillingForShippingDisabled: '91572',\n        VaultIsDisabled: '91525'\n      },\n      OrderIdIsTooLong: '91501',\n      PayPalAuthExpired: '91579',\n      PayPalNotEnabled: '91576',\n      PayPalVaultRecordMissingData: '91583',\n      PaymentInstrumentNotSupportedByMerchantAccount: '91577',\n      PaymentInstrumentTypeIsNotAccepted: '915101',\n      PaymentMethodConflict: '91515',\n      PaymentMethodConflictWithVenmoSDK: '91549',\n      PaymentMethodDoesNotBelongToCustomer: '91516',\n      PaymentMethodDoesNotBelongToSubscription: '91527',\n      PaymentMethodNonceCardTypeIsNotAccepted: '91567',\n      PaymentMethodNonceConsumed: '91564',\n      PaymentMethodNonceHasNoValidPaymentInstrumentType: '91569',\n      PaymentMethodNonceLocked: '91566',\n      PaymentMethodNonceUnknown: '91565',\n      PaymentMethodTokenCardTypeIsNotAccepted: '91517',\n      PaymentMethodTokenIsInvalid: '91518',\n      ProcessorAuthorizationCodeCannotBeSet: '91519',\n      ProcessorAuthorizationCodeIsInvalid: '81520',\n      ProcessorDoesNotSupportAuths: '915104',\n      ProcessorDoesNotSupportCredits: '91546',\n      ProcessorDoesNotSupportPartialSettlement: '915102',\n      ProcessorDoesNotSupportUpdatingOrderId: '915107',\n      ProcessorDoesNotSupportUpdatingDescriptor: '915108',\n      ProcessorDoesNotSupportUpdatingTransactionDetails: '915130',\n      ProcessorDoesNotSupportVoiceAuthorizations: '91545',\n      PurchaseOrderNumberIsInvalid: '91548',\n      PurchaseOrderNumberIsTooLong: '91537',\n      RefundAmountIsTooLarge: '91521',\n      ServiceFeeAmountCannotBeNegative: '91554',\n      ServiceFeeAmountFormatIsInvalid: '91555',\n      ServiceFeeAmountIsTooLarge: '91556',\n      ServiceFeeAmountNotAllowedOnMasterMerchantAccount: '91557',\n      ServiceFeeIsNotAllowedOnCredits: '91552',\n      ServiceFeeNotAcceptedForPayPal: '91578',\n      SettlementAmountIsLessThanServiceFeeAmount: '91551',\n      SettlementAmountIsTooLarge: '91522',\n      ShippingAddressDoesntMatchCustomer: '91581',\n      SubMerchantAccountRequiresServiceFeeAmount: '91553',\n      SubscriptionDoesNotBelongToCustomer: '91529',\n      SubscriptionIdIsInvalid: '91528',\n      SubscriptionStatusMustBePastDue: '91531',\n      TaxAmountCannotBeNegative: '81534',\n      TaxAmountFormatIsInvalid: '81535',\n      TaxAmountIsTooLarge: '81536',\n      ThreeDSecureAuthenticationFailed: '81571',\n      ThreeDSecureTokenIsInvalid: '91568',\n      ThreeDSecureTransactionDataDoesntMatchVerify: '91570',\n      ThreeDSecureEciFlagIsRequired: '915113',\n      ThreeDSecureCavvIsRequired: '915116',\n      ThreeDSecureXidIsRequired: '915115',\n      ThreeDSecureEciFlagIsInvalid: '915114',\n      ThreeDSecureMerchantAccountDoesNotSupportCardType: '915131',\n      TransactionSettlementAmountIsLessThanServiceFeeAmount: '91551',\n      TypeIsInvalid: '91523',\n      TypeIsRequired: '91524',\n      UnsupportedVoiceAuthorization: '91539',\n      IndustryData: {\n        IndustryTypeIsInvalid: '93401',\n        Lodging: {\n          EmptyData: '93402',\n          FolioNumberIsInvalid: '93403',\n          CheckInDateIsInvalid: '93404',\n          CheckOutDateIsInvalid: '93405',\n          CheckOutDateMustFollowCheckInDate: '93406',\n          UnknownDataField: '93407'\n        },\n        TravelCruise: {\n          EmptyData: '93408',\n          UnknownDataField: '93409',\n          TravelPackageIsInvalid: '93410',\n          DepartureDateIsInvalid: '93411',\n          CheckInDateIsInvalid: '93412',\n          CheckOutDateIsInvalid: '93413'\n        }\n      }\n    };\n\n    this.Verification = {\n      Options: {\n        AmountCannotBeNegative: '94201',\n        AmountFormatIsInvalid: '94202',\n        AmountIsTooLarge: '94207',\n        AmountNotSupportedByProcessor: '94203',\n        MerchantAccountIdIsInvalid: '94204',\n        MerchantAccountIsSuspended: '94205',\n        MerchantAccountIsForbidden: '94206',\n        MerchantAccountCannotBeSubMerchantAccount: '94208'\n      }\n    };\n  }\n}\nValidationErrorCodes.initClass();\n\nmodule.exports = {ValidationErrorCodes: ValidationErrorCodes};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/test/credit_card_defaults.js":"'use strict';\n\nlet CreditCardDefaults = {\n  CountryOfIssuance: 'USA',\n  IssuingBank: 'NETWORK ONLY'\n};\n\nmodule.exports = {CreditCardDefaults: CreditCardDefaults};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/test/credit_card_numbers.js":"'use strict';\n\nlet CreditCardNumbers = {\n  CardTypeIndicators: {\n    Prepaid: '4111111111111210',\n    Commercial: '4111111111131010',\n    Payroll: '4111111114101010',\n    Healthcare: '4111111510101010',\n    DurbinRegulated: '4111161010101010',\n    Debit: '4117101010101010',\n    Unknown: '4111111111112101',\n    No: '4111111111310101',\n    IssuingBank: '4111111141010101',\n    CountryOfIssuance: '4111111111121102',\n    Fraud: '4000111111111511'\n  },\n\n  AmexPayWithPoints: {\n    Success: '371260714673002',\n    IneligibleCard: '378267515471109',\n    InsufficientPoints: '371544868764018'\n  }\n};\n\nmodule.exports = {CreditCardNumbers: CreditCardNumbers};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/test/merchant_account.js":"'use strict';\n\nlet MerchantAccountTest = {\n  Approve: 'approve_me',\n  InsufficientFundsContactUs: 'insufficient_funds__contact',\n  AccountNotAuthorizedContactUs: 'account_not_authorized__contact',\n  BankRejectedUpdateFundingInformation: 'bank_rejected__update',\n  BankRejectedNone: 'bank_rejected__none'\n};\n\nmodule.exports = {MerchantAccountTest: MerchantAccountTest};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/test/nonces.js":"'use strict';\n\nlet Nonces = {\n  Transactable: 'fake-valid-nonce',\n  Consumed: 'fake-consumed-nonce',\n  PayPalOneTimePayment: 'fake-paypal-one-time-nonce',\n  PayPalFuturePayment: 'fake-paypal-future-nonce',\n  PayPalBillingAgreement: 'fake-paypal-billing-agreement-nonce',\n  ApplePayVisa: 'fake-apple-pay-visa-nonce',\n  ApplePayMasterCard: 'fake-apple-pay-mastercard-nonce',\n  ApplePayAmEx: 'fake-apple-pay-amex-nonce',\n  AbstractTransactable: 'fake-abstract-transactable-nonce',\n  Europe: 'fake-europe-bank-account-nonce',\n  Coinbase: 'fake-coinbase-nonce',\n  AndroidPay: 'fake-android-pay-nonce',\n  AndroidPayDiscover: 'fake-android-pay-discover-nonce',\n  AndroidPayVisa: 'fake-android-pay-visa-nonce',\n  AndroidPayMasterCard: 'fake-android-pay-mastercard-nonce',\n  AndroidPayAmEx: 'fake-android-pay-amex-nonce',\n  AmexExpressCheckout: 'fake-amex-express-checkout-nonce',\n  TransactableVisa: 'fake-valid-visa-nonce',\n  TransactableAmEx: 'fake-valid-amex-nonce',\n  TransactableMasterCard: 'fake-valid-mastercard-nonce',\n  TransactableDiscover: 'fake-valid-discover-nonce',\n  TransactableJCB: 'fake-valid-jcb-nonce',\n  TransactableMaestro: 'fake-valid-maestro-nonce',\n  TransactableDinersClub: 'fake-valid-dinersclub-nonce',\n  TransactablePrepaid: 'fake-valid-prepaid-nonce',\n  TransactableCommercial: 'fake-valid-commercial-nonce',\n  TransactableDurbinRegulated: 'fake-valid-durbin-regulated-nonce',\n  TransactableHealthcare: 'fake-valid-healthcare-nonce',\n  TransactableDebit: 'fake-valid-debit-nonce',\n  TransactablePayroll: 'fake-valid-payroll-nonce',\n  TransactableNoIndicators: 'fake-valid-no-indicators-nonce',\n  TransactableUnknownIndicators: 'fake-valid-unknown-indicators-nonce',\n  TransactableCountryOfIssuanceUSA: 'fake-valid-country-of-issuance-usa-nonce',\n  TransactableCountryOfIssuanceCAD: 'fake-valid-country-of-issuance-cad-nonce',\n  TransactableIssuingBankNetworkOnly: 'fake-valid-issuing-bank-network-only-nonce',\n  ProcessorDeclinedVisa: 'fake-processor-declined-visa-nonce',\n  ProcessorDeclinedMasterCard: 'fake-processor-declined-mastercard-nonce',\n  ProcessorDeclinedAmEx: 'fake-processor-declined-amex-nonce',\n  ProcessorDeclinedDiscover: 'fake-processor-declined-discover-nonce',\n  ProcessorFailureJCB: 'fake-processor-failure-jcb-nonce',\n  LuhnInvalid: 'fake-luhn-invalid-nonce',\n  PayPalFuturePaymentRefreshToken: 'fake-paypal-future-refresh-token-nonce',\n  SEPA: 'fake-sepa-bank-account-nonce',\n  GatewayRejectedFraud: 'fake-gateway-rejected-fraud-nonce',\n  VenmoAccount: 'fake-venmo-account-nonce'\n};\n\nmodule.exports = {Nonces: Nonces};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/test/transaction_amounts.js":"'use strict';\n\nlet TransactionAmounts = {\n  Authorize: '1000.00',\n  Decline: '2000.00',\n  Fail: '3000.00'\n};\n\nmodule.exports = {TransactionAmounts: TransactionAmounts};\n","/home/travis/build/npmtest/node-npmtest-braintree/node_modules/braintree/lib/braintree/coinbase_account_gateway.js":"'use strict';\n\nlet Gateway = require('./gateway').Gateway;\nlet CoinbaseAccount = require('./coinbase_account').CoinbaseAccount;\nlet exceptions = require('./exceptions');\n\nclass CoinbaseAccountGateway extends Gateway {\n  constructor(gateway) {\n    super();\n    this.gateway = gateway;\n    this.config = this.gateway.config;\n  }\n\n  find(token, callback) {\n    if (token.trim() === '') {\n      return callback(exceptions.NotFoundError('Not Found'), null); // eslint-disable-line new-cap\n    }\n\n    return this.gateway.http.get(`${this.config.baseMerchantPath()}/payment_methods/coinbase_account/${token}`, function (err, response) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, new CoinbaseAccount(response.coinbaseAccount));\n    });\n  }\n\n  delete(token, callback) {\n    return this.gateway.http.delete(`${this.config.baseMerchantPath()}/payment_methods/coinbase_account/${token}`, callback);\n  }\n\n  responseHandler(callback) {\n    return this.createResponseHandler('coinbaseAccount', CoinbaseAccount, callback);\n  }\n}\n\nmodule.exports = {CoinbaseAccountGateway: CoinbaseAccountGateway};\n"}